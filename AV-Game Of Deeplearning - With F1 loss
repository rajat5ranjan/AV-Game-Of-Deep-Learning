{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 54
    },
    "colab_type": "code",
    "id": "hBwKdNd2Z2De",
    "outputId": "f94ee527-22e6-46e9-e48a-befe4eab9c6a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['imagenet_class_index.json', 'inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5', 'xception_weights_tf_dim_ordering_tf_kernels.h5', 'inception_v3_weights_tf_dim_ordering_tf_kernels.h5', 'resnet50_weights_tf_dim_ordering_tf_kernels.h5', 'xception_weights_tf_dim_ordering_tf_kernels_notop.h5', 'vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', 'inception_resnet_v2_weights_tf_dim_ordering_tf_kernels.h5', 'inception_resnet_v2_weights_tf_dim_ordering_tf_kernels_notop.h5', 'resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', 'Kuszma.JPG']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "import os\n",
    "from tqdm import tqdm, tqdm_notebook\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential, Model\n",
    "from tensorflow.keras.layers import *\n",
    "from tensorflow.keras.optimizers import *\n",
    "from tensorflow.keras.applications import *\n",
    "from tensorflow.keras.callbacks import *\n",
    "from tensorflow.keras.initializers import *\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "import time\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
    "\n",
    "import os\n",
    "print(os.listdir(\"../input/keras-pretrained-models\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dQZgQ-AraKmn"
   },
   "outputs": [],
   "source": [
    "# root_path = '../input/game-of-deep-learning-ship-datasets/train/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "i2iOWao3apsO",
    "outputId": "01f3aa25-55d1-4d8c-a285-32d9028df0a2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__notebook__.ipynb', '__output__.json']\n"
     ]
    }
   ],
   "source": [
    "# !pip install PyDrive\n",
    "\n",
    "# from pydrive.auth import GoogleAuth\n",
    "# from pydrive.drive import GoogleDrive\n",
    "# from google.colab import auth\n",
    "# from oauth2client.client import GoogleCredentials\n",
    "\n",
    "# auth.authenticate_user()\n",
    "# gauth = GoogleAuth()\n",
    "# gauth.credentials = GoogleCredentials.get_application_default()\n",
    "# drive = GoogleDrive(gauth)\n",
    "\n",
    "# download = drive.CreateFile({'id': '1yoygVWIL21qEOjbD6KJ9_B1t_FyApAzI'})\n",
    "# download.GetContentFile('train.zip')\n",
    "# !unzip -q \"train.zip\"\n",
    "import os\n",
    "print(os.listdir())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "s-4slALhbKuC",
    "outputId": "4ba879b7-60fe-4bc6-c921-a49abd6c4201"
   },
   "outputs": [],
   "source": [
    "# !unzip -q \"gdrive/My Drive/AVDeeplearning/train.zip\" -d \"gdrive/My Drive/AVDeeplearning/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "iD4_qdK8bxqE"
   },
   "outputs": [],
   "source": [
    "# img_dir='gdrive/My Drive/AVDeeplearning/images/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 54
    },
    "colab_type": "code",
    "id": "HbGzBJOKApYo",
    "outputId": "5d946594-94ce-489a-b342-b994d76a179b"
   },
   "outputs": [],
   "source": [
    "# print(os.listdir(img_dir))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tg-jYGwqckcc"
   },
   "outputs": [],
   "source": [
    "\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 195
    },
    "colab_type": "code",
    "id": "0SWdmrz8cpjX",
    "outputId": "d342f073-30b7-4347-a768-fbfe4881d675"
   },
   "outputs": [],
   "source": [
    "train_df=pd.read_csv('../input/game-of-deep-learning-ship-datasets/train/train.csv')\n",
    "test_df=pd.read_csv('../input/game-of-deep-learning-ship-datasets/test_ApKoW4T.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "6yZLZ6rec1ML",
    "outputId": "47973e09-d7e0-448d-ad7a-0db69785cdea"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2823080.jpg', '2870024.jpg', '2662125.jpg', ..., '2898652.jpg',\n",
       "       '2868175.jpg', '2784171.jpg'], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images=np.array(train_df.iloc[:,0])\n",
    "train_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 118
    },
    "colab_type": "code",
    "id": "7zKlgTKQ7VVf",
    "outputId": "a21a445b-9b7b-4a0f-9146-2ca50ff53cb0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    2120\n",
       "5    1217\n",
       "2    1167\n",
       "3     916\n",
       "4     832\n",
       "Name: category, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df['category'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 286
    },
    "colab_type": "code",
    "id": "eYmoSM86c-9I",
    "outputId": "6ca62f14-50da-4536-e6f5-a710f3491ee0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Image shape = (158, 210, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "img_dir='../input/game-of-deep-learning-ship-datasets/train/images/'\n",
    "image = plt.imread(img_dir+train_images[150])\n",
    "print(\"Image shape =\", image.shape)\n",
    "train_input_shape = image.shape\n",
    "plt.imshow(image)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "jXof3UN_dCOt",
    "outputId": "ab610c26-a8ef-4204-8b04-34a43f093972"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of unique classes = 5\n"
     ]
    }
   ],
   "source": [
    "n_classes = len(train_df.category.unique())\n",
    "print(\"Number of unique classes =\", n_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zA63k4NFe8-P"
   },
   "outputs": [],
   "source": [
    "train_df['category']=train_df['category'].astype('str')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "qnCTCP7Ee_Xx",
    "outputId": "a84f4803-0014-49b6-a360-4eeedae1f615"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 4689 images belonging to 5 classes.\n",
      "Found 1563 images belonging to 5 classes.\n"
     ]
    }
   ],
   "source": [
    "IMG_SIZE = 331\n",
    "BATCH_SIZE = 16\n",
    "\n",
    "# rotation_range=50,\n",
    "# width_shift_range=0.2,\n",
    "# height_shift_range=0.2,\n",
    "# shear_range=0.2,\n",
    "\n",
    "# zoom_range=0.2,\n",
    "# horizontal_flip=True,\n",
    "#  vertical_flip=True,\n",
    "# fill_mode='nearest'\n",
    "\n",
    "datagen = ImageDataGenerator(rescale=1./255, validation_split=0.25)\n",
    "train_generator = datagen.flow_from_dataframe(dataframe=train_df,\n",
    "                                              directory=img_dir,\n",
    "                                              x_col=\"image\",\n",
    "                                              y_col=\"category\",\n",
    "                                              target_size=(IMG_SIZE, IMG_SIZE),\n",
    "                                              batch_size=BATCH_SIZE,\n",
    "                                              seed=42,\n",
    "                                              subset=\"training\",\n",
    "                                              class_mode=\"categorical\",\n",
    "                                             color_mode='rgb',\n",
    "                                             shuffle=True)\n",
    "\n",
    "valid_generator = datagen.flow_from_dataframe(dataframe=train_df,\n",
    "                                              directory=img_dir,\n",
    "                                              x_col=\"image\",\n",
    "                                              y_col=\"category\",\n",
    "                                              target_size=(IMG_SIZE, IMG_SIZE),\n",
    "                                              batch_size=BATCH_SIZE,\n",
    "                                              seed=42,\n",
    "                                              subset=\"validation\",\n",
    "                                              class_mode=\"categorical\",\n",
    "                                             color_mode='rgb',\n",
    "                                             shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7us_QVuCfEyG"
   },
   "outputs": [],
   "source": [
    "def loss_accuracy_plot(history):\n",
    "    plt.figure(figsize=(15,10))\n",
    "    plt.subplot(2, 2, 1)\n",
    "    plt.plot(history.history['loss'])\n",
    "    plt.plot(history.history['val_loss'])\n",
    "    plt.title('model loss')\n",
    "    plt.ylabel('loss')\n",
    "    plt.xlabel('epoch')\n",
    "    plt.legend(['train', 'validation'], loc='best')\n",
    "\n",
    "    plt.subplot(2, 2, 2)\n",
    "    plt.plot(history.history['acc'])\n",
    "    plt.plot(history.history['val_acc'])\n",
    "    plt.title('model accuracy')\n",
    "    plt.ylabel('accuracy')\n",
    "    plt.xlabel('epoch')\n",
    "    plt.legend(['train', 'validation'], loc='best')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "C45Ap_b7fH7H"
   },
   "outputs": [],
   "source": [
    "\n",
    "def get_test_data():\n",
    "    test_datagen=ImageDataGenerator(rescale=1./255.)\n",
    "    test_generator=test_datagen.flow_from_dataframe(dataframe=test_df,\n",
    "                                                directory=img_dir,\n",
    "                                                x_col=\"image\",\n",
    "                                                y_col=None,\n",
    "                                                target_size=(IMG_SIZE, IMG_SIZE),\n",
    "                                                seed=42,\n",
    "                                                shuffle=False,\n",
    "                                                batch_size=1,\n",
    "                                                class_mode=None)\n",
    "    return test_generator\n",
    "\n",
    "def get_train_data():\n",
    "    data = ImageDataGenerator(rescale=1./255)\n",
    "    data_generator = data.flow_from_dataframe(dataframe=train_df,\n",
    "                                                directory=img_dir,\n",
    "                                                x_col=\"image\",\n",
    "                                                y_col=\"category\",\n",
    "                                                target_size=(IMG_SIZE, IMG_SIZE),\n",
    "                                                batch_size=BATCH_SIZE,\n",
    "                                                seed=42,\n",
    "                                                class_mode=\"categorical\")\n",
    "    return data_generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n4l5QzLNAfBb"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from keras.losses import binary_crossentropy, categorical_crossentropy\n",
    "import keras.backend as K\n",
    "import numpy as np\n",
    "from prettytable import PrettyTable\n",
    "from prettytable import ALL\n",
    "from sklearn.metrics import f1_score\n",
    "def f1(y_true, y_pred):\n",
    "    y_pred = K.round(y_pred)\n",
    "    tp = K.sum(K.cast(y_true*y_pred, 'float'), axis=0)\n",
    "    tn = K.sum(K.cast((1-y_true)*(1-y_pred), 'float'), axis=0)\n",
    "    fp = K.sum(K.cast((1-y_true)*y_pred, 'float'), axis=0)\n",
    "    fn = K.sum(K.cast(y_true*(1-y_pred), 'float'), axis=0)\n",
    "\n",
    "    p = tp / (tp + fp + K.epsilon())\n",
    "    r = tp / (tp + fn + K.epsilon())\n",
    "\n",
    "    f1 = 2*p*r / (p+r+K.epsilon())\n",
    "    f1 = tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)\n",
    "    return K.mean(f1)\n",
    "\n",
    "def f1_loss(y_true, y_pred):\n",
    "    \n",
    "    tp = K.sum(K.cast(y_true*y_pred, 'float'), axis=0)\n",
    "    tn = K.sum(K.cast((1-y_true)*(1-y_pred), 'float'), axis=0)\n",
    "    fp = K.sum(K.cast((1-y_true)*y_pred, 'float'), axis=0)\n",
    "    fn = K.sum(K.cast(y_true*(1-y_pred), 'float'), axis=0)\n",
    "\n",
    "    p = tp / (tp + fp + K.epsilon())\n",
    "    r = tp / (tp + fn + K.epsilon())\n",
    "\n",
    "    f1 = 2*p*r / (p+r+K.epsilon())\n",
    "    f1 = tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)\n",
    "    return 1 - K.mean(f1)\n",
    "\n",
    "def get_modelInceptionResNetV2(train_generator,valid_generator,epochs,IMG_SIZE):\n",
    "    print('Running keras application for InceptionResNetV2')\n",
    "    base_model = InceptionResNetV2(weights='../input/inceptionresnetv2/inception_resnet_v2_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, input_shape=(IMG_SIZE,IMG_SIZE,3))\n",
    "    print('Model loaded')\n",
    "    x=base_model.output\n",
    "    x=GlobalAveragePooling2D()(x)\n",
    "#     x=Dense(1024,activation='relu')(x)\n",
    "#     x=BatchNormalization()(x)\n",
    "#     dropout1 = Dropout(0.7)\n",
    "#     x = dropout1(x)\n",
    "#     x = Flatten()(x)\n",
    "#     x = Dense(16, kernel_initializer='he_uniform')(x)\n",
    "#     x = Dropout(0.5)(x)\n",
    "#     x = BatchNormalization()(x)\n",
    "#     x = Activation('relu')(x)\n",
    "    preds=Dense(5,activation='softmax')(x)\n",
    "    model=Model(inputs=base_model.input,outputs=preds)\n",
    "\n",
    "    adam = tf.train.AdamOptimizer(learning_rate=0.0001)\n",
    "    rmsProp=RMSprop(lr=0.0001, rho=0.9, epsilon=None, decay=0.0)\n",
    "    model.compile(optimizer=rmsProp,loss=f1_loss,metrics=['accuracy',f1])\n",
    "    early_stop = EarlyStopping(monitor='val_acc', patience=20, verbose=1, \n",
    "                           mode='auto', restore_best_weights=True)\n",
    "    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=5, \n",
    "                                verbose=1, mode='auto')\n",
    "    check=ModelCheckpoint('.mdl_wts.inceptionResnetv2.hdf5', save_best_only=True, monitor='val_f1', mode='max')\n",
    "    import time\n",
    "    STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
    "    STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n",
    "    start = time.time()\n",
    "    history = model.fit_generator(\n",
    "        train_generator,\n",
    "          epochs=epochs,\n",
    "          steps_per_epoch=STEP_SIZE_TRAIN,\n",
    "          validation_data=valid_generator,\n",
    "          validation_steps=STEP_SIZE_VALID,\n",
    "        callbacks=[reduce_lr,early_stop,check]\n",
    "    )\n",
    "    print(\"Time taken to train-test split: \", (time.time() - start)/60)\n",
    "    print('plotting')\n",
    "    loss_accuracy_plot(history)\n",
    "    return model\n",
    "\n",
    "def get_modelVGG(train_generator,valid_generator,epochs,IMG_SIZE):\n",
    "    print('Running keras application for VGG')\n",
    "    base_model = VGG16(weights='../input/keras-pretrained-models/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, input_shape=(IMG_SIZE,IMG_SIZE,3))\n",
    "    print('Model loaded')\n",
    "    x=base_model.output\n",
    "    x=GlobalAveragePooling2D()(x)\n",
    "#     x=Dense(1024,activation='relu')(x)\n",
    "#     x=BatchNormalization()(x)\n",
    "#     dropout1 = Dropout(0.7)\n",
    "#     x = dropout1(x)\n",
    "#     x = Flatten()(x)\n",
    "#     x = Dense(16, kernel_initializer='he_uniform')(x)\n",
    "#     x = Dropout(0.5)(x)\n",
    "#     x = BatchNormalization()(x)\n",
    "#     x = Activation('relu')(x)\n",
    "    preds=Dense(5,activation='softmax')(x)\n",
    "    model=Model(inputs=base_model.input,outputs=preds)\n",
    "\n",
    "    adam = tf.train.AdamOptimizer(learning_rate=0.0001)\n",
    "    rmsProp=RMSprop(lr=0.0001, rho=0.9, epsilon=None, decay=0.0)\n",
    "    model.compile(optimizer=rmsProp,loss=f1_loss,metrics=['accuracy',f1])\n",
    "    early_stop = EarlyStopping(monitor='val_acc', patience=20, verbose=1, \n",
    "                           mode='auto', restore_best_weights=True)\n",
    "    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=5, \n",
    "                                verbose=1, mode='auto')\n",
    "    check=ModelCheckpoint('.mdl_wts.vgg.hdf5', save_best_only=True, monitor='val_f1', mode='max')\n",
    "    import time\n",
    "    STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
    "    STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n",
    "    start = time.time()\n",
    "    history = model.fit_generator(\n",
    "        train_generator,\n",
    "          epochs=epochs,\n",
    "          steps_per_epoch=STEP_SIZE_TRAIN,\n",
    "          validation_data=valid_generator,\n",
    "          validation_steps=STEP_SIZE_VALID,\n",
    "        callbacks=[reduce_lr,early_stop,check]\n",
    "    )\n",
    "    print(\"Time taken to train-test split: \", (time.time() - start)/60)\n",
    "    print('plotting')\n",
    "    loss_accuracy_plot(history)\n",
    "    return model\n",
    "\n",
    "def get_modelResnet50(train_generator,valid_generator,epochs,IMG_SIZE):\n",
    "    print('Running keras application for Resnet50')\n",
    "    base_model = ResNet50(weights='../input/keras-pretrained-models/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, input_shape=(IMG_SIZE,IMG_SIZE,3))\n",
    "    print('Model loaded')\n",
    "    x=base_model.output\n",
    "    x=GlobalAveragePooling2D()(x)\n",
    "#     x=Dense(1024,activation='relu')(x)\n",
    "#     x=BatchNormalization()(x)\n",
    "#     dropout1 = Dropout(0.7)\n",
    "#     x = dropout1(x)\n",
    "#     x = Flatten()(x)\n",
    "#     x = Dense(16, kernel_initializer='he_uniform')(x)\n",
    "#     x = Dropout(0.5)(x)\n",
    "#     x = BatchNormalization()(x)\n",
    "#     x = Activation('relu')(x)\n",
    "    preds=Dense(5,activation='softmax')(x)\n",
    "    model=Model(inputs=base_model.input,outputs=preds)\n",
    "\n",
    "    adam = tf.train.AdamOptimizer(learning_rate=0.0001)\n",
    "    rmsProp=RMSprop(lr=0.0001, rho=0.9, epsilon=None, decay=0.0)\n",
    "    model.compile(optimizer=rmsProp,loss=f1_loss,metrics=['accuracy',f1])\n",
    "    early_stop = EarlyStopping(monitor='val_acc', patience=20, verbose=1, \n",
    "                           mode='auto', restore_best_weights=True)\n",
    "    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=5, \n",
    "                                verbose=1, mode='auto')\n",
    "    check=ModelCheckpoint('.mdl_wts.resnet50.hdf5', save_best_only=True, monitor='val_acc', mode='max')\n",
    "    import time\n",
    "    STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
    "    STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n",
    "    start = time.time()\n",
    "    history = model.fit_generator(\n",
    "        train_generator,\n",
    "          epochs=epochs,\n",
    "          steps_per_epoch=STEP_SIZE_TRAIN,\n",
    "          validation_data=valid_generator,\n",
    "          validation_steps=STEP_SIZE_VALID,\n",
    "        callbacks=[reduce_lr,early_stop,check]\n",
    "    )\n",
    "    print(\"Time taken to train-test split: \", (time.time() - start)/60)\n",
    "    print('plotting')\n",
    "    loss_accuracy_plot(history)\n",
    "    return model\n",
    "\n",
    "#great\n",
    "def get_modelInceptionV3(train_generator,valid_generator,epochs,IMG_SIZE):\n",
    "    print('Running keras application for InceptionV3')\n",
    "    base_model = InceptionV3(weights='../input/keras-pretrained-models/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, input_shape=(IMG_SIZE,IMG_SIZE,3))\n",
    "    print('Model loaded')\n",
    "    x=base_model.output\n",
    "    x=GlobalAveragePooling2D()(x)\n",
    "#     x=Dense(1024,activation='relu')(x)\n",
    "#     dropout1 = Dropout(0.7)\n",
    "#     x = dropout1(x)\n",
    "#     x = Flatten()(x)\n",
    "#     x = Dense(16, kernel_initializer='he_uniform')(x)\n",
    "#     x = Dropout(0.5)(x)\n",
    "#     x = BatchNormalization()(x)\n",
    "#     x = Activation('relu')(x)\n",
    "    preds=Dense(5,activation='softmax')(x)\n",
    "    model=Model(inputs=base_model.input,outputs=preds)\n",
    "    adam = tf.train.AdamOptimizer(learning_rate=0.0001)\n",
    "    rmsProp=RMSprop(lr=0.0001, rho=0.9, epsilon=None, decay=0.0)\n",
    "    model.compile(optimizer=rmsProp,loss=f1_loss,metrics=['accuracy',f1])\n",
    "    early_stop = EarlyStopping(monitor='val_acc', patience=20, verbose=1, \n",
    "                           mode='auto', restore_best_weights=True)\n",
    "    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=5, \n",
    "                                verbose=1, mode='auto')\n",
    "    check=ModelCheckpoint('.mdl_wts.inceptionV3.hdf5', save_best_only=True, monitor='val_f1', mode='max')\n",
    "    import time\n",
    "    STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
    "    STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n",
    "    start = time.time()\n",
    "    history = model.fit_generator(\n",
    "        train_generator,\n",
    "          epochs=epochs,\n",
    "          steps_per_epoch=STEP_SIZE_TRAIN,\n",
    "          validation_data=valid_generator,\n",
    "          validation_steps=STEP_SIZE_VALID\n",
    "        ,\n",
    "        callbacks=[reduce_lr,early_stop,check]\n",
    "    )\n",
    "    print(\"Time taken to train-test split: \", (time.time() - start)/60)\n",
    "    print('plotting')\n",
    "    loss_accuracy_plot(history)\n",
    "    return model\n",
    "\n",
    "def get_modelXception(train_generator,valid_generator,epochs,IMG_SIZE):\n",
    "    print('Running keras application for Xception')\n",
    "    base_model = Xception(weights='../input/keras-pretrained-models/xception_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, input_shape=(IMG_SIZE,IMG_SIZE,3))\n",
    "    print('Model loaded')\n",
    "    x=base_model.output\n",
    "    x=GlobalAveragePooling2D()(x)\n",
    "#     x=Dense(1024,activation='relu')(x)\n",
    "#     dropout1 = Dropout(0.7)\n",
    "#     x = dropout1(x)\n",
    "#     x = Flatten()(x)\n",
    "#     x = Dense(16, kernel_initializer='he_uniform')(x)\n",
    "#     x = Dropout(0.5)(x)\n",
    "#     x = BatchNormalization()(x)\n",
    "#     x = Activation('relu')(x)\n",
    "    preds=Dense(5,activation='softmax')(x)\n",
    "    model=Model(inputs=base_model.input,outputs=preds)\n",
    "    adam = tf.train.AdamOptimizer(learning_rate=0.0001)\n",
    "    rmsProp=RMSprop(lr=0.00001, rho=0.9, epsilon=None, decay=0.0)\n",
    "    model.compile(optimizer=rmsProp,loss=f1_loss,metrics=['accuracy',f1])\n",
    "    early_stop = EarlyStopping(monitor='val_acc', patience=20, verbose=1, \n",
    "                           mode='auto', restore_best_weights=True)\n",
    "    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=5, \n",
    "                                verbose=1, mode='auto')\n",
    "    check=ModelCheckpoint('.mdl_wts.xception.hdf5', save_best_only=True, monitor='val_f1', mode='max',verbose=1)\n",
    "    STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
    "    STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n",
    "    start = time.time()\n",
    "    history = model.fit_generator(\n",
    "        train_generator,\n",
    "          epochs=epochs,\n",
    "          steps_per_epoch=STEP_SIZE_TRAIN,\n",
    "          validation_data=valid_generator,\n",
    "          validation_steps=STEP_SIZE_VALID,\n",
    "        callbacks=[reduce_lr,early_stop,check]\n",
    "    )\n",
    "    print(\"Time taken to train-test split: \", (time.time() - start)/60)\n",
    "    print('plotting')\n",
    "    loss_accuracy_plot(history)\n",
    "    return model\n",
    "\n",
    "\n",
    "\n",
    "def predict_main(model,epochs):\n",
    "    print('getting_train_test_generator')\n",
    "    train_generator_main= get_train_data()\n",
    "    test_generator_main=get_test_data()\n",
    "    STEP_SIZE_TRAIN=test_generator_main.n//test_generator_main.batch_size\n",
    "    start = time.time()\n",
    "    history = model.fit_generator(\n",
    "         train_generator_main,\n",
    "          epochs=epochs,\n",
    "          steps_per_epoch=STEP_SIZE_TRAIN\n",
    "    )\n",
    "    print(\"Time taken to train: \", (time.time() - start)/60)\n",
    "    print('start predicting')\n",
    "    predictions = model.predict_generator(test_generator_main, verbose=1)\n",
    "    return predictions\n",
    "\n",
    "\n",
    "def submission(pred,model):\n",
    "    pred=np.argmax(pred,axis=1)\n",
    "    results=pd.DataFrame({\"image\":test_df[\"image\"],\n",
    "                        \"category\":pred})\n",
    "    results['category']=results['category'].apply(lambda x: x+1)\n",
    "    print(results['category'].value_counts())\n",
    "    results.to_csv('sub_generator_'+model+'.csv',index=False)\n",
    "    print(results.head(10))\n",
    "  \n",
    "  \n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running keras application for Xception\n",
      "WARNING:tensorflow:From /opt/conda/lib/python3.6/site-packages/tensorflow/python/ops/resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "Model loaded\n",
      "WARNING:tensorflow:From /opt/conda/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Epoch 1/10\n",
      "98/98 [==============================] - 11s 113ms/step - loss: 0.3637 - acc: 0.8554 - f1: 0.7643\n",
      "\n",
      "Epoch 00001: val_f1 improved from -inf to 0.76429, saving model to .mdl_wts.xception.hdf5\n",
      "294/294 [==============================] - 176s 599ms/step - loss: 0.6284 - acc: 0.6596 - f1: 0.3393 - val_loss: 0.3637 - val_acc: 0.8554 - val_f1: 0.7643\n",
      "Epoch 2/10\n",
      "98/98 [==============================] - 10s 105ms/step - loss: 0.1789 - acc: 0.9091 - f1: 0.8648\n",
      "\n",
      "Epoch 00002: val_f1 improved from 0.76429 to 0.86484, saving model to .mdl_wts.xception.hdf5\n",
      "294/294 [==============================] - 156s 532ms/step - loss: 0.2758 - acc: 0.8614 - f1: 0.8174 - val_loss: 0.1789 - val_acc: 0.9091 - val_f1: 0.8648\n",
      "Epoch 3/10\n",
      "98/98 [==============================] - 10s 102ms/step - loss: 0.1555 - acc: 0.9271 - f1: 0.8644\n",
      "\n",
      "Epoch 00003: val_f1 did not improve from 0.86484\n",
      "294/294 [==============================] - 155s 529ms/step - loss: 0.1670 - acc: 0.9170 - f1: 0.8744 - val_loss: 0.1555 - val_acc: 0.9271 - val_f1: 0.8644\n",
      "Epoch 4/10\n",
      "98/98 [==============================] - 10s 102ms/step - loss: 0.1276 - acc: 0.9335 - f1: 0.8849\n",
      "\n",
      "Epoch 00004: val_f1 improved from 0.86484 to 0.88489, saving model to .mdl_wts.xception.hdf5\n",
      "294/294 [==============================] - 156s 530ms/step - loss: 0.1271 - acc: 0.9424 - f1: 0.8946 - val_loss: 0.1276 - val_acc: 0.9335 - val_f1: 0.8849\n",
      "Epoch 5/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.1128 - acc: 0.9386 - f1: 0.8973\n",
      "\n",
      "Epoch 00005: val_f1 improved from 0.88489 to 0.89732, saving model to .mdl_wts.xception.hdf5\n",
      "294/294 [==============================] - 156s 530ms/step - loss: 0.1129 - acc: 0.9586 - f1: 0.9017 - val_loss: 0.1128 - val_acc: 0.9386 - val_f1: 0.8973\n",
      "Epoch 6/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.1174 - acc: 0.9424 - f1: 0.8915\n",
      "\n",
      "Epoch 00006: val_f1 did not improve from 0.89732\n",
      "294/294 [==============================] - 155s 528ms/step - loss: 0.0912 - acc: 0.9714 - f1: 0.9199 - val_loss: 0.1174 - val_acc: 0.9424 - val_f1: 0.8915\n",
      "Epoch 7/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.0958 - acc: 0.9437 - f1: 0.9112\n",
      "\n",
      "Epoch 00007: val_f1 improved from 0.89732 to 0.91124, saving model to .mdl_wts.xception.hdf5\n",
      "294/294 [==============================] - 156s 530ms/step - loss: 0.0816 - acc: 0.9797 - f1: 0.9279 - val_loss: 0.0958 - val_acc: 0.9437 - val_f1: 0.9112\n",
      "Epoch 8/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.1099 - acc: 0.9475 - f1: 0.8981\n",
      "\n",
      "Epoch 00008: val_f1 did not improve from 0.91124\n",
      "294/294 [==============================] - 155s 528ms/step - loss: 0.0689 - acc: 0.9834 - f1: 0.9372 - val_loss: 0.1099 - val_acc: 0.9475 - val_f1: 0.8981\n",
      "Epoch 9/10\n",
      "98/98 [==============================] - 10s 102ms/step - loss: 0.1000 - acc: 0.9463 - f1: 0.9058\n",
      "\n",
      "Epoch 00009: val_f1 did not improve from 0.91124\n",
      "294/294 [==============================] - 156s 529ms/step - loss: 0.0671 - acc: 0.9889 - f1: 0.9389 - val_loss: 0.1000 - val_acc: 0.9463 - val_f1: 0.9058\n",
      "Epoch 10/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.1014 - acc: 0.9507 - f1: 0.9044\n",
      "\n",
      "Epoch 00010: val_f1 did not improve from 0.91124\n",
      "294/294 [==============================] - 155s 528ms/step - loss: 0.0718 - acc: 0.9895 - f1: 0.9313 - val_loss: 0.1014 - val_acc: 0.9507 - val_f1: 0.9044\n",
      "Time taken to train-test split:  26.449641756216685\n",
      "plotting\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting_train_test_generator\n",
      "Found 6252 images belonging to 5 classes.\n",
      "Found 2680 images.\n",
      "Epoch 1/20\n",
      "391/391 [==============================] - 194s 497ms/step - loss: 0.0779 - acc: 0.9709 - f1: 0.9299\n",
      "Epoch 2/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0858 - acc: 0.9790 - f1: 0.9204\n",
      "Epoch 3/20\n",
      "391/391 [==============================] - 194s 495ms/step - loss: 0.0750 - acc: 0.9819 - f1: 0.9300\n",
      "Epoch 4/20\n",
      "391/391 [==============================] - 194s 495ms/step - loss: 0.0637 - acc: 0.9870 - f1: 0.9398\n",
      "Epoch 5/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0596 - acc: 0.9896 - f1: 0.9435\n",
      "Epoch 6/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0583 - acc: 0.9914 - f1: 0.9448\n",
      "Epoch 7/20\n",
      "391/391 [==============================] - 194s 495ms/step - loss: 0.0551 - acc: 0.9933 - f1: 0.9470\n",
      "Epoch 8/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0533 - acc: 0.9941 - f1: 0.9483\n",
      "Epoch 9/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0510 - acc: 0.9952 - f1: 0.9501\n",
      "Epoch 10/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0540 - acc: 0.9957 - f1: 0.9471\n",
      "Epoch 11/20\n",
      "391/391 [==============================] - 194s 495ms/step - loss: 0.0567 - acc: 0.9962 - f1: 0.9442\n",
      "Epoch 12/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0572 - acc: 0.9968 - f1: 0.9435\n",
      "Epoch 13/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0556 - acc: 0.9970 - f1: 0.9450\n",
      "Epoch 14/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0519 - acc: 0.9966 - f1: 0.9486\n",
      "Epoch 15/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0546 - acc: 0.9970 - f1: 0.9460\n",
      "Epoch 16/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0562 - acc: 0.9973 - f1: 0.9443\n",
      "Epoch 17/20\n",
      "391/391 [==============================] - 194s 496ms/step - loss: 0.0524 - acc: 0.9973 - f1: 0.9478\n",
      "Epoch 18/20\n",
      "391/391 [==============================] - 194s 497ms/step - loss: 0.0610 - acc: 0.9979 - f1: 0.9393\n",
      "Epoch 19/20\n",
      "391/391 [==============================] - 194s 495ms/step - loss: 0.0525 - acc: 0.9978 - f1: 0.9478\n",
      "Epoch 20/20\n",
      " 33/391 [=>............................] - ETA: 2:58 - loss: 0.0506 - acc: 0.9981 - f1: 0.9498"
     ]
    }
   ],
   "source": [
    "import time\n",
    "np.random.seed(42)\n",
    "xception_model=get_modelXception(train_generator,valid_generator,10,IMG_SIZE)\n",
    "xception_model.load_weights(filepath = '.mdl_wts.xception.hdf5')\n",
    "y_pred_xception=predict_main(xception_model,20)\n",
    "submission(y_pred_xception,'xception_model_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running keras application for InceptionV3\n",
      "Model loaded\n",
      "Epoch 1/10\n",
      "98/98 [==============================] - 11s 108ms/step - loss: 0.1675 - acc: 0.8836 - f1: 0.8399\n",
      "294/294 [==============================] - 174s 592ms/step - loss: 0.2233 - acc: 0.8462 - f1: 0.7908 - val_loss: 0.1675 - val_acc: 0.8836 - val_f1: 0.8399\n",
      "Epoch 2/10\n",
      "98/98 [==============================] - 8s 85ms/step - loss: 0.1484 - acc: 0.9098 - f1: 0.8556\n",
      "294/294 [==============================] - 78s 265ms/step - loss: 0.1284 - acc: 0.9121 - f1: 0.8765 - val_loss: 0.1484 - val_acc: 0.9098 - val_f1: 0.8556\n",
      "Epoch 3/10\n",
      "98/98 [==============================] - 8s 85ms/step - loss: 0.1295 - acc: 0.9002 - f1: 0.8718\n",
      "294/294 [==============================] - 78s 264ms/step - loss: 0.1195 - acc: 0.9245 - f1: 0.8846 - val_loss: 0.1295 - val_acc: 0.9002 - val_f1: 0.8718\n",
      "Epoch 4/10\n",
      "98/98 [==============================] - 8s 85ms/step - loss: 0.1472 - acc: 0.9143 - f1: 0.8529\n",
      "294/294 [==============================] - 77s 261ms/step - loss: 0.1108 - acc: 0.9369 - f1: 0.8927 - val_loss: 0.1472 - val_acc: 0.9143 - val_f1: 0.8529\n",
      "Epoch 5/10\n",
      "98/98 [==============================] - 8s 86ms/step - loss: 0.1292 - acc: 0.9347 - f1: 0.8763\n",
      "294/294 [==============================] - 78s 265ms/step - loss: 0.0994 - acc: 0.9456 - f1: 0.9036 - val_loss: 0.1292 - val_acc: 0.9347 - val_f1: 0.8763\n",
      "Epoch 6/10\n",
      "98/98 [==============================] - 8s 84ms/step - loss: 0.1244 - acc: 0.9239 - f1: 0.8762\n",
      "294/294 [==============================] - 77s 261ms/step - loss: 0.0971 - acc: 0.9488 - f1: 0.9049 - val_loss: 0.1244 - val_acc: 0.9239 - val_f1: 0.8762\n",
      "Epoch 7/10\n",
      "98/98 [==============================] - 9s 88ms/step - loss: 0.1297 - acc: 0.9367 - f1: 0.8714\n",
      "294/294 [==============================] - 77s 263ms/step - loss: 0.0789 - acc: 0.9650 - f1: 0.9239 - val_loss: 0.1297 - val_acc: 0.9367 - val_f1: 0.8714\n",
      "Epoch 8/10\n",
      "98/98 [==============================] - 8s 86ms/step - loss: 0.1035 - acc: 0.9431 - f1: 0.8975\n",
      "294/294 [==============================] - 78s 265ms/step - loss: 0.0922 - acc: 0.9635 - f1: 0.9100 - val_loss: 0.1035 - val_acc: 0.9431 - val_f1: 0.8975\n",
      "Epoch 9/10\n",
      "98/98 [==============================] - 8s 85ms/step - loss: 0.1104 - acc: 0.9367 - f1: 0.8908\n",
      "294/294 [==============================] - 77s 262ms/step - loss: 0.0834 - acc: 0.9642 - f1: 0.9166 - val_loss: 0.1104 - val_acc: 0.9367 - val_f1: 0.8908\n",
      "Epoch 10/10\n",
      "98/98 [==============================] - 8s 86ms/step - loss: 0.1213 - acc: 0.9379 - f1: 0.8814\n",
      "294/294 [==============================] - 77s 261ms/step - loss: 0.0640 - acc: 0.9740 - f1: 0.9374 - val_loss: 0.1213 - val_acc: 0.9379 - val_f1: 0.8814\n",
      "Time taken to train-test split:  14.84016284942627\n",
      "plotting\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting_train_test_generator\n",
      "Found 6252 images belonging to 5 classes.\n",
      "Found 2680 images.\n",
      "Epoch 1/10\n",
      "391/391 [==============================] - 93s 239ms/step - loss: 0.0832 - acc: 0.9567 - f1: 0.9182\n",
      "Epoch 2/10\n",
      "391/391 [==============================] - 92s 236ms/step - loss: 0.0931 - acc: 0.9639 - f1: 0.9090\n",
      "Epoch 3/10\n",
      "391/391 [==============================] - 92s 236ms/step - loss: 0.0849 - acc: 0.9671 - f1: 0.9165\n",
      "Epoch 4/10\n",
      "391/391 [==============================] - 93s 237ms/step - loss: 0.0739 - acc: 0.9718 - f1: 0.9273\n",
      "Epoch 5/10\n",
      "391/391 [==============================] - 93s 237ms/step - loss: 0.0710 - acc: 0.9734 - f1: 0.9302\n",
      "Epoch 6/10\n",
      "391/391 [==============================] - 92s 236ms/step - loss: 0.0713 - acc: 0.9752 - f1: 0.9298\n",
      "Epoch 7/10\n",
      "391/391 [==============================] - 92s 236ms/step - loss: 0.0681 - acc: 0.9771 - f1: 0.9328\n",
      "Epoch 8/10\n",
      "391/391 [==============================] - 93s 237ms/step - loss: 0.0642 - acc: 0.9806 - f1: 0.9370\n",
      "Epoch 9/10\n",
      "391/391 [==============================] - 93s 237ms/step - loss: 0.0602 - acc: 0.9838 - f1: 0.9413\n",
      "Epoch 10/10\n",
      "391/391 [==============================] - 92s 236ms/step - loss: 0.0634 - acc: 0.9850 - f1: 0.9379\n",
      "Time taken to train:  15.429159283638\n",
      "start predicting\n",
      "2680/2680 [==============================] - 78s 29ms/step\n",
      "1    958\n",
      "2    506\n",
      "5    468\n",
      "3    392\n",
      "4    356\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         4\n",
      "1  1011369.jpg         4\n",
      "2  1051155.jpg         4\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         4\n",
      "5  1072861.jpg         4\n",
      "6  1097264.jpg         4\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         4\n"
     ]
    }
   ],
   "source": [
    "\n",
    "inceptionV3_model=get_modelInceptionV3(train_generator,valid_generator,10,IMG_SIZE)\n",
    "inceptionV3_model.load_weights(filepath = '.mdl_wts.inceptionV3.hdf5')\n",
    "y_pred_inceptionV3=predict_main(inceptionV3_model,10)\n",
    "submission(y_pred_inceptionV3,'inceptionV3_model_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1618
    },
    "colab_type": "code",
    "id": "h4DNc2KPATlF",
    "outputId": "cd14bd5c-8214-42ee-8bca-387c0f90f200"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running keras application for Resnet50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/keras_applications/resnet50.py:265: UserWarning: The output shape of `ResNet50(include_top=False)` has been changed since Keras 2.2.0.\n",
      "  warnings.warn('The output shape of `ResNet50(include_top=False)` '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded\n",
      "Epoch 1/10\n",
      "98/98 [==============================] - 11s 112ms/step - loss: 0.8177 - acc: 0.2252 - f1: 0.0000e+00\n",
      "294/294 [==============================] - 184s 627ms/step - loss: 0.2238 - acc: 0.8281 - f1: 0.7886 - val_loss: 0.8177 - val_acc: 0.2252 - val_f1: 0.0000e+00\n",
      "Epoch 2/10\n",
      "98/98 [==============================] - 9s 92ms/step - loss: 0.6977 - acc: 0.4530 - f1: 0.2653\n",
      "294/294 [==============================] - 88s 298ms/step - loss: 0.1578 - acc: 0.8889 - f1: 0.8488 - val_loss: 0.6977 - val_acc: 0.4530 - val_f1: 0.2653\n",
      "Epoch 3/10\n",
      "98/98 [==============================] - 9s 92ms/step - loss: 0.3956 - acc: 0.6942 - f1: 0.6078\n",
      "294/294 [==============================] - 88s 300ms/step - loss: 0.1463 - acc: 0.9040 - f1: 0.8577 - val_loss: 0.3956 - val_acc: 0.6942 - val_f1: 0.6078\n",
      "Epoch 4/10\n",
      "98/98 [==============================] - 9s 92ms/step - loss: 0.2997 - acc: 0.7729 - f1: 0.7005\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.1422 - acc: 0.9160 - f1: 0.8611 - val_loss: 0.2997 - val_acc: 0.7729 - val_f1: 0.7005\n",
      "Epoch 5/10\n",
      "98/98 [==============================] - 9s 92ms/step - loss: 0.2708 - acc: 0.8138 - f1: 0.7342\n",
      "294/294 [==============================] - 88s 300ms/step - loss: 0.1148 - acc: 0.9292 - f1: 0.8895 - val_loss: 0.2708 - val_acc: 0.8138 - val_f1: 0.7342\n",
      "Epoch 6/10\n",
      "98/98 [==============================] - 9s 91ms/step - loss: 0.2681 - acc: 0.8042 - f1: 0.7326\n",
      "294/294 [==============================] - 87s 295ms/step - loss: 0.1049 - acc: 0.9403 - f1: 0.8973 - val_loss: 0.2681 - val_acc: 0.8042 - val_f1: 0.7326\n",
      "Epoch 7/10\n",
      "98/98 [==============================] - 9s 91ms/step - loss: 0.1465 - acc: 0.9047 - f1: 0.8526\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.1144 - acc: 0.9390 - f1: 0.8883 - val_loss: 0.1465 - val_acc: 0.9047 - val_f1: 0.8526\n",
      "Epoch 8/10\n",
      "98/98 [==============================] - 9s 92ms/step - loss: 0.1589 - acc: 0.8938 - f1: 0.8483\n",
      "294/294 [==============================] - 87s 296ms/step - loss: 0.0875 - acc: 0.9578 - f1: 0.9154 - val_loss: 0.1589 - val_acc: 0.8938 - val_f1: 0.8483\n",
      "Epoch 9/10\n",
      "98/98 [==============================] - 9s 92ms/step - loss: 0.1615 - acc: 0.8861 - f1: 0.8389\n",
      "294/294 [==============================] - 87s 296ms/step - loss: 0.1013 - acc: 0.9533 - f1: 0.9003 - val_loss: 0.1615 - val_acc: 0.8861 - val_f1: 0.8389\n",
      "Epoch 10/10\n",
      "98/98 [==============================] - 9s 91ms/step - loss: 0.1573 - acc: 0.8932 - f1: 0.8462\n",
      "294/294 [==============================] - 87s 295ms/step - loss: 0.0878 - acc: 0.9659 - f1: 0.9143 - val_loss: 0.1573 - val_acc: 0.8932 - val_f1: 0.8462\n",
      "Time taken to train-test split:  16.67452343304952\n",
      "plotting\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting_train_test_generator\n",
      "Found 6252 images belonging to 5 classes.\n",
      "Found 2680 images.\n",
      "Epoch 1/10\n",
      "391/391 [==============================] - 105s 268ms/step - loss: 0.0986 - acc: 0.9413 - f1: 0.9040\n",
      "Epoch 2/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.1104 - acc: 0.9451 - f1: 0.8917\n",
      "Epoch 3/10\n",
      "391/391 [==============================] - 104s 267ms/step - loss: 0.1011 - acc: 0.9512 - f1: 0.9014\n",
      "Epoch 4/10\n",
      "391/391 [==============================] - 104s 267ms/step - loss: 0.0849 - acc: 0.9599 - f1: 0.9166\n",
      "Epoch 5/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.0832 - acc: 0.9616 - f1: 0.9185\n",
      "Epoch 6/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.0765 - acc: 0.9696 - f1: 0.9251\n",
      "Epoch 7/10\n",
      "391/391 [==============================] - 105s 267ms/step - loss: 0.0743 - acc: 0.9718 - f1: 0.9273\n",
      "Epoch 8/10\n",
      "391/391 [==============================] - 104s 267ms/step - loss: 0.0679 - acc: 0.9771 - f1: 0.9331\n",
      "Epoch 9/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.0672 - acc: 0.9744 - f1: 0.9342\n",
      "Epoch 10/10\n",
      "391/391 [==============================] - 104s 267ms/step - loss: 0.0715 - acc: 0.9765 - f1: 0.9303\n",
      "Time taken to train:  17.37539265950521\n",
      "start predicting\n",
      "2680/2680 [==============================] - 51s 19ms/step\n",
      "1    866\n",
      "5    642\n",
      "2    419\n",
      "3    389\n",
      "4    364\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         4\n",
      "1  1011369.jpg         4\n",
      "2  1051155.jpg         4\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         4\n",
      "5  1072861.jpg         4\n",
      "6  1097264.jpg         4\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         4\n"
     ]
    }
   ],
   "source": [
    "import gc\n",
    "gc.collect()\n",
    "resnet50_model=get_modelResnet50(train_generator,valid_generator,10,IMG_SIZE)\n",
    "resnet50_model.load_weights(filepath = '.mdl_wts.resnet50.hdf5')\n",
    "y_pred_resnet50=predict_main(resnet50_model,10)\n",
    "submission(y_pred_resnet50,'resnet50_model_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running keras application for VGG\n",
      "Model loaded\n",
      "Epoch 1/10\n",
      "98/98 [==============================] - 12s 121ms/step - loss: 0.9513 - acc: 0.1337 - f1: 0.0489\n",
      "294/294 [==============================] - 111s 379ms/step - loss: 0.7010 - acc: 0.4129 - f1: 0.2583 - val_loss: 0.9513 - val_acc: 0.1337 - val_f1: 0.0489\n",
      "Epoch 2/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.9414 - acc: 0.1772 - f1: 0.0586\n",
      "294/294 [==============================] - 88s 301ms/step - loss: 0.8062 - acc: 0.3444 - f1: 0.1941 - val_loss: 0.9414 - val_acc: 0.1772 - val_f1: 0.0586\n",
      "Epoch 3/10\n",
      "98/98 [==============================] - 10s 100ms/step - loss: 0.9419 - acc: 0.1772 - f1: 0.0581\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.9385 - acc: 0.1898 - f1: 0.0615 - val_loss: 0.9419 - val_acc: 0.1772 - val_f1: 0.0581\n",
      "Epoch 4/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.9420 - acc: 0.1772 - f1: 0.0580\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.9386 - acc: 0.1898 - f1: 0.0614 - val_loss: 0.9420 - val_acc: 0.1772 - val_f1: 0.0580\n",
      "Epoch 5/10\n",
      "98/98 [==============================] - 10s 100ms/step - loss: 0.9421 - acc: 0.1772 - f1: 0.0579\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.9384 - acc: 0.1898 - f1: 0.0616 - val_loss: 0.9421 - val_acc: 0.1772 - val_f1: 0.0579\n",
      "Epoch 6/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.9422 - acc: 0.1772 - f1: 0.0578\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.9387 - acc: 0.1898 - f1: 0.0613 - val_loss: 0.9422 - val_acc: 0.1772 - val_f1: 0.0578\n",
      "Epoch 7/10\n",
      "98/98 [==============================] - 10s 100ms/step - loss: 0.9417 - acc: 0.1772 - f1: 0.0583\n",
      "\n",
      "Epoch 00007: ReduceLROnPlateau reducing learning rate to 2.9999999242136255e-05.\n",
      "294/294 [==============================] - 92s 312ms/step - loss: 0.9388 - acc: 0.1898 - f1: 0.0612 - val_loss: 0.9417 - val_acc: 0.1772 - val_f1: 0.0583\n",
      "Epoch 8/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.9421 - acc: 0.1772 - f1: 0.0579\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.9386 - acc: 0.1898 - f1: 0.0614 - val_loss: 0.9421 - val_acc: 0.1772 - val_f1: 0.0579\n",
      "Epoch 9/10\n",
      "98/98 [==============================] - 10s 100ms/step - loss: 0.9410 - acc: 0.1772 - f1: 0.0590\n",
      "294/294 [==============================] - 88s 299ms/step - loss: 0.9380 - acc: 0.1898 - f1: 0.0620 - val_loss: 0.9410 - val_acc: 0.1772 - val_f1: 0.0590\n",
      "Epoch 10/10\n",
      "98/98 [==============================] - 10s 101ms/step - loss: 0.9425 - acc: 0.1772 - f1: 0.0575\n",
      "294/294 [==============================] - 88s 300ms/step - loss: 0.9386 - acc: 0.1898 - f1: 0.0614 - val_loss: 0.9425 - val_acc: 0.1772 - val_f1: 0.0575\n",
      "Time taken to train-test split:  15.488450507322947\n",
      "plotting\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting_train_test_generator\n",
      "Found 6252 images belonging to 5 classes.\n",
      "Found 2680 images.\n",
      "Epoch 1/10\n",
      "391/391 [==============================] - 105s 268ms/step - loss: 0.9392 - acc: 0.1867 - f1: 0.0608\n",
      "Epoch 2/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.9393 - acc: 0.1867 - f1: 0.0607\n",
      "Epoch 3/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.9394 - acc: 0.1867 - f1: 0.0606\n",
      "Epoch 4/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.9393 - acc: 0.1867 - f1: 0.0607\n",
      "Epoch 5/10\n",
      "391/391 [==============================] - 104s 265ms/step - loss: 0.9394 - acc: 0.1867 - f1: 0.0606\n",
      "Epoch 6/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.9395 - acc: 0.1867 - f1: 0.0605\n",
      "Epoch 7/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.9392 - acc: 0.1867 - f1: 0.0608\n",
      "Epoch 8/10\n",
      "391/391 [==============================] - 104s 266ms/step - loss: 0.9392 - acc: 0.1867 - f1: 0.0608\n",
      "Epoch 9/10\n",
      "391/391 [==============================] - 104s 265ms/step - loss: 0.9393 - acc: 0.1867 - f1: 0.0607\n",
      "Epoch 10/10\n",
      "391/391 [==============================] - 104s 265ms/step - loss: 0.9393 - acc: 0.1867 - f1: 0.0607\n",
      "Time taken to train:  17.330909971396128\n",
      "start predicting\n",
      "2680/2680 [==============================] - 38s 14ms/step\n",
      "2    2680\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         2\n",
      "1  1011369.jpg         2\n",
      "2  1051155.jpg         2\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         2\n",
      "5  1072861.jpg         2\n",
      "6  1097264.jpg         2\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         2\n"
     ]
    }
   ],
   "source": [
    "import gc\n",
    "gc.collect()\n",
    "vgg_model=get_modelVGG(train_generator,valid_generator,10,IMG_SIZE)\n",
    "vgg_model.load_weights(filepath = '.mdl_wts.vgg.hdf5')\n",
    "y_pred_vgg=predict_main(vgg_model,10)\n",
    "submission(y_pred_vgg,'vgg_model_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "aB3kZcKvB_pq"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running keras application for InceptionResNetV2\n",
      "Model loaded\n",
      "Epoch 1/10\n",
      "98/98 [==============================] - 24s 243ms/step - loss: 0.1495 - acc: 0.9104 - f1: 0.8508\n",
      "294/294 [==============================] - 996s 3s/step - loss: 0.2156 - acc: 0.8356 - f1: 0.7944 - val_loss: 0.1495 - val_acc: 0.9104 - val_f1: 0.8508\n",
      "Epoch 2/10\n",
      "98/98 [==============================] - 19s 190ms/step - loss: 0.1523 - acc: 0.8804 - f1: 0.8487\n",
      "294/294 [==============================] - 178s 607ms/step - loss: 0.1427 - acc: 0.9032 - f1: 0.8618 - val_loss: 0.1523 - val_acc: 0.8804 - val_f1: 0.8487\n",
      "Epoch 3/10\n",
      "98/98 [==============================] - 19s 191ms/step - loss: 0.1644 - acc: 0.8938 - f1: 0.8391\n",
      "294/294 [==============================] - 179s 608ms/step - loss: 0.1275 - acc: 0.9258 - f1: 0.8764 - val_loss: 0.1644 - val_acc: 0.8938 - val_f1: 0.8391\n",
      "Epoch 4/10\n",
      "98/98 [==============================] - 19s 190ms/step - loss: 0.1240 - acc: 0.9213 - f1: 0.8761\n",
      "294/294 [==============================] - 181s 615ms/step - loss: 0.1119 - acc: 0.9407 - f1: 0.8919 - val_loss: 0.1240 - val_acc: 0.9213 - val_f1: 0.8761\n",
      "Epoch 5/10\n",
      "98/98 [==============================] - 19s 191ms/step - loss: 0.1128 - acc: 0.9341 - f1: 0.8889\n",
      "294/294 [==============================] - 182s 618ms/step - loss: 0.1054 - acc: 0.9512 - f1: 0.8963 - val_loss: 0.1128 - val_acc: 0.9341 - val_f1: 0.8889\n",
      "Epoch 6/10\n",
      "98/98 [==============================] - 19s 190ms/step - loss: 0.0916 - acc: 0.9501 - f1: 0.9129\n",
      "294/294 [==============================] - 182s 619ms/step - loss: 0.0793 - acc: 0.9640 - f1: 0.9234 - val_loss: 0.0916 - val_acc: 0.9501 - val_f1: 0.9129\n",
      "Epoch 7/10\n",
      "98/98 [==============================] - 19s 191ms/step - loss: 0.0941 - acc: 0.9495 - f1: 0.9069\n",
      "294/294 [==============================] - 179s 608ms/step - loss: 0.0800 - acc: 0.9693 - f1: 0.9215 - val_loss: 0.0941 - val_acc: 0.9495 - val_f1: 0.9069\n",
      "Epoch 8/10\n",
      "98/98 [==============================] - 19s 189ms/step - loss: 0.1302 - acc: 0.9245 - f1: 0.8723\n",
      "294/294 [==============================] - 178s 606ms/step - loss: 0.0738 - acc: 0.9744 - f1: 0.9281 - val_loss: 0.1302 - val_acc: 0.9245 - val_f1: 0.8723\n",
      "Epoch 9/10\n",
      "98/98 [==============================] - 19s 190ms/step - loss: 0.1169 - acc: 0.9386 - f1: 0.8885\n",
      "294/294 [==============================] - 179s 608ms/step - loss: 0.0745 - acc: 0.9765 - f1: 0.9271 - val_loss: 0.1169 - val_acc: 0.9386 - val_f1: 0.8885\n",
      "Epoch 10/10\n",
      "98/98 [==============================] - 19s 190ms/step - loss: 0.1109 - acc: 0.9373 - f1: 0.8903\n",
      "294/294 [==============================] - 178s 607ms/step - loss: 0.0720 - acc: 0.9774 - f1: 0.9299 - val_loss: 0.1109 - val_acc: 0.9373 - val_f1: 0.8903\n",
      "Time taken to train-test split:  44.822232166926064\n",
      "plotting\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getting_train_test_generator\n",
      "Found 6252 images belonging to 5 classes.\n",
      "Found 2680 images.\n",
      "Epoch 1/10\n",
      "391/391 [==============================] - 214s 547ms/step - loss: 0.0823 - acc: 0.9589 - f1: 0.9199\n",
      "Epoch 2/10\n",
      "391/391 [==============================] - 213s 544ms/step - loss: 0.0938 - acc: 0.9635 - f1: 0.9079\n",
      "Epoch 3/10\n",
      "391/391 [==============================] - 214s 546ms/step - loss: 0.0847 - acc: 0.9658 - f1: 0.9167\n",
      "Epoch 4/10\n",
      "391/391 [==============================] - 213s 544ms/step - loss: 0.0720 - acc: 0.9750 - f1: 0.9288\n",
      "Epoch 5/10\n",
      "391/391 [==============================] - 213s 545ms/step - loss: 0.0718 - acc: 0.9720 - f1: 0.9288\n",
      "Epoch 6/10\n",
      "391/391 [==============================] - 214s 546ms/step - loss: 0.0671 - acc: 0.9787 - f1: 0.9336\n",
      "Epoch 7/10\n",
      "391/391 [==============================] - 213s 545ms/step - loss: 0.0647 - acc: 0.9819 - f1: 0.9366\n",
      "Epoch 8/10\n",
      "391/391 [==============================] - 213s 546ms/step - loss: 0.0622 - acc: 0.9834 - f1: 0.9388\n",
      "Epoch 9/10\n",
      "391/391 [==============================] - 213s 546ms/step - loss: 0.0559 - acc: 0.9885 - f1: 0.9448\n",
      "Epoch 10/10\n",
      "391/391 [==============================] - 213s 546ms/step - loss: 0.0614 - acc: 0.9853 - f1: 0.9394\n",
      "Time taken to train:  35.5647611061732\n",
      "start predicting\n",
      "2680/2680 [==============================] - 203s 76ms/step\n",
      "1    948\n",
      "2    512\n",
      "5    477\n",
      "3    387\n",
      "4    356\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         4\n",
      "1  1011369.jpg         4\n",
      "2  1051155.jpg         4\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         4\n",
      "5  1072861.jpg         4\n",
      "6  1097264.jpg         4\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         4\n"
     ]
    }
   ],
   "source": [
    "import gc\n",
    "gc.collect()\n",
    "inception_resnet_model=get_modelInceptionResNetV2(train_generator,valid_generator,10,IMG_SIZE)\n",
    "inception_resnet_model.load_weights(filepath = '.mdl_wts.inceptionResnetv2.hdf5')\n",
    "y_pred_inception_resnet=predict_main(inception_resnet_model,10)\n",
    "submission(y_pred_inception_resnet,'inception_resnet_model_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[8.2903879e-23, 3.9394045e-21, 2.1416738e-25, 1.0000000e+00,\n",
       "        4.2125291e-25],\n",
       "       [3.2281847e-24, 1.4280677e-32, 1.6012677e-28, 1.0000000e+00,\n",
       "        1.0567701e-31],\n",
       "       [4.4667041e-11, 5.2462514e-09, 3.4200344e-11, 1.0000000e+00,\n",
       "        1.0875213e-10],\n",
       "       ...,\n",
       "       [1.7059258e-06, 8.6192777e-15, 8.4716149e-14, 9.9999809e-01,\n",
       "        1.8825475e-07],\n",
       "       [9.9261779e-01, 3.3428146e-06, 6.8339534e-09, 7.3786476e-03,\n",
       "        2.1278385e-07],\n",
       "       [1.2605684e-09, 1.1788900e-12, 4.5649882e-14, 1.0000000e+00,\n",
       "        2.2948296e-10]], dtype=float32)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_vgg\n",
    "y_pred_resnet50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 235
    },
    "colab_type": "code",
    "id": "61bJQXWtAwgx",
    "outputId": "ec3538a3-a988-4528-d7d8-23bf040f0938"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    937\n",
      "2    506\n",
      "5    491\n",
      "3    391\n",
      "4    355\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         4\n",
      "1  1011369.jpg         4\n",
      "2  1051155.jpg         4\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         4\n",
      "5  1072861.jpg         4\n",
      "6  1097264.jpg         4\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         4\n"
     ]
    }
   ],
   "source": [
    "y_pred_ens=(y_pred_xception*0.4+y_pred_inceptionV3*0.3+y_pred_inception_resnet*0.3)\n",
    "y_pred_ens\n",
    "submission(y_pred_ens,'ensemble_3_models_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 302
    },
    "colab_type": "code",
    "id": "pzEVV_V0A94p",
    "outputId": "0b8a8297-5dc7-4026-80d6-a02ec5e56923"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    937\n",
      "2    507\n",
      "5    489\n",
      "3    392\n",
      "4    355\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         4\n",
      "1  1011369.jpg         4\n",
      "2  1051155.jpg         4\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         4\n",
      "5  1072861.jpg         4\n",
      "6  1097264.jpg         4\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         4\n"
     ]
    }
   ],
   "source": [
    "y_pred_ens=(y_pred_xception*0.5+y_pred_inceptionV3*0.5)\n",
    "y_pred_ens\n",
    "submission(y_pred_ens,'ensemble_2_models_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    912\n",
      "2    513\n",
      "5    511\n",
      "3    390\n",
      "4    354\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         4\n",
      "1  1011369.jpg         4\n",
      "2  1051155.jpg         4\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         4\n",
      "5  1072861.jpg         4\n",
      "6  1097264.jpg         4\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         4\n"
     ]
    }
   ],
   "source": [
    "y_pred_ens=(y_pred_xception*0.2+y_pred_inceptionV3*0.2+y_pred_vgg*0.2 + y_pred_resnet50*0.2 +y_pred_inception_resnet*0.2)\n",
    "y_pred_ens\n",
    "submission(y_pred_ens,'ensemble_5_models_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    940\n",
      "2    506\n",
      "5    487\n",
      "3    391\n",
      "4    356\n",
      "Name: category, dtype: int64\n",
      "         image  category\n",
      "0  1007700.jpg         4\n",
      "1  1011369.jpg         4\n",
      "2  1051155.jpg         4\n",
      "3  1062001.jpg         2\n",
      "4  1069397.jpg         4\n",
      "5  1072861.jpg         4\n",
      "6  1097264.jpg         4\n",
      "7  1098763.jpg         2\n",
      "8  1098766.jpg         2\n",
      "9  1101145.jpg         4\n"
     ]
    }
   ],
   "source": [
    "y_pred_ens=(y_pred_xception*0.3+y_pred_inceptionV3*0.4+y_pred_inception_resnet*0.3)\n",
    "y_pred_ens\n",
    "submission(y_pred_ens,'ensemble_3_1_models_cbk16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "pPEAwJ3KfbML",
    "outputId": "4d4bcc6d-5fb0-4a82-f2ed-3e2898036270"
   },
   "outputs": [],
   "source": [
    "# def get_modelNasNet(train_generator,valid_generator,epochs,IMG_SIZE):\n",
    "#   print('Running keras application for VGG16')\n",
    "#   base_model = VGG16(weights='imagenet', include_top=False,input_shape=(IMG_SIZE,IMG_SIZE,3))\n",
    "#   print('Model loaded')\n",
    "#   x=base_model.output\n",
    "#   x=GlobalAveragePooling2D()(x)\n",
    "#   x = Flatten()(x)\n",
    "#   x=Dense(1024,activation='relu')(x)\n",
    "#   dropout1 = Dropout(0.5)\n",
    "#   x = dropout1(x)\n",
    "#   x=Dense(512,activation='relu')(x)\n",
    "#   dropout2 = Dropout(0.5)\n",
    "#   x = dropout2(x)\n",
    "#   preds=Dense(5,activation='softmax')(x)\n",
    "#   model=Model(inputs=base_model.input,outputs=preds)\n",
    "#   adam = tf.train.AdamOptimizer(learning_rate=0.0001)\n",
    "#   model.compile(optimizer=adam,loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "#   early_stop = EarlyStopping(monitor='val_acc', patience=20, verbose=1, \n",
    "#                            mode='auto', restore_best_weights=True)\n",
    "#   reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=5, \n",
    "#                                 verbose=1, mode='auto')\n",
    "#   import time\n",
    "#   STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n",
    "#   STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n",
    "#   start = time.time()\n",
    "#   history = model.fit_generator(\n",
    "#         train_generator,\n",
    "#           epochs=epochs,\n",
    "#           steps_per_epoch=STEP_SIZE_TRAIN,\n",
    "#           validation_data=valid_generator,\n",
    "#           validation_steps=STEP_SIZE_VALID,\n",
    "#       callbacks=[early_stop]\n",
    "#   )\n",
    "#   print(\"Time taken to train-test split: \", (time.time() - start)/60)\n",
    "#   print('plotting')\n",
    "#   loss_accuracy_plot(history)\n",
    "#   return model\n",
    "\n",
    "\n",
    "# IMG_SIZE = 256\n",
    "# BATCH_SIZE = 16\n",
    "# datagen = ImageDataGenerator(rescale=1./255, validation_split=0.25,\n",
    "#                             rotation_range=40,\n",
    "#                             width_shift_range=0.2,\n",
    "#                             height_shift_range=0.2,\n",
    "#                             shear_range=0.2,\n",
    "#                             zoom_range=0.2,\n",
    "#                             horizontal_flip=True,\n",
    "#                             fill_mode='nearest')\n",
    "# train_generator = datagen.flow_from_dataframe(dataframe=train_df,\n",
    "#                                               directory=img_dir,\n",
    "#                                               x_col=\"image\",\n",
    "#                                               y_col=\"category\",\n",
    "#                                               target_size=(IMG_SIZE, IMG_SIZE),\n",
    "#                                               batch_size=BATCH_SIZE,\n",
    "#                                               seed=42,\n",
    "#                                               subset=\"training\",\n",
    "#                                               class_mode=\"categorical\",\n",
    "#                                              color_mode='rgb',\n",
    "#                                              shuffle=True)\n",
    "\n",
    "# valid_generator = datagen.flow_from_dataframe(dataframe=train_df,\n",
    "#                                               directory=img_dir,\n",
    "#                                               x_col=\"image\",\n",
    "#                                               y_col=\"category\",\n",
    "#                                               target_size=(IMG_SIZE, IMG_SIZE),\n",
    "#                                               batch_size=BATCH_SIZE,\n",
    "#                                               seed=42,\n",
    "#                                               subset=\"validation\",\n",
    "#                                               class_mode=\"categorical\",\n",
    "#                                              color_mode='rgb',\n",
    "#                                              shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 743
    },
    "colab_type": "code",
    "id": "hL1AsHH6fftz",
    "outputId": "432e42a5-8551-4848-f381-fb2752138bc2"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YkkvDk6tggUo"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Pnls65CctCFV"
   },
   "outputs": [],
   "source": [
    "# predictions1 = model.predict_generator(test_generator, verbose=1)\n",
    "# predictions1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 386
    },
    "colab_type": "code",
    "id": "LniD8cNt4zyw",
    "outputId": "8d87e884-5a85-4a09-d6d7-942181b36cbc"
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# model=get_modelInceptionV3()\n",
    "# early_stop1 = EarlyStopping(monitor='acc', patience=20, verbose=1, \n",
    "#                            mode='auto', restore_best_weights=True)\n",
    "# STEP_SIZE_TRAIN=data_generator.n//data_generator.batch_size\n",
    "# start = time.time()\n",
    "\n",
    "# history = model.fit_generator(\n",
    "#         train_generator,\n",
    "#         epochs=10,\n",
    "#         steps_per_epoch=STEP_SIZE_TRAIN\n",
    "#     ,\n",
    "#     callbacks=[early_stop1]\n",
    "# )\n",
    "# print(\"Time taken to train: \", (time.time() - start)/60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 252
    },
    "colab_type": "code",
    "id": "a0B87_0r5Ol-",
    "outputId": "73dc8618-1ce4-4fe3-aaaa-aa1bfe484f46"
   },
   "outputs": [],
   "source": [
    "# predictions = model.predict_generator(test_generator, verbose=1)\n",
    "# predictions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "yytyBD1F5WF9"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 118
    },
    "colab_type": "code",
    "id": "yQExIYyw5abP",
    "outputId": "426793a3-0217-4563-987c-cb1231476bec"
   },
   "outputs": [],
   "source": [
    "# subfile='gdrive/My Drive/AVDeeplearning/subs/sub_generator.csv'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "PHcUmgyb_Q5w",
    "outputId": "6bec10b4-d6ce-4fc3-a23f-32b1943cf2a3"
   },
   "outputs": [],
   "source": [
    "# np.argmax(predictions,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1882
    },
    "colab_type": "code",
    "id": "_i2fBlfU_qNT",
    "outputId": "4bbd7152-15a7-4de0-99c3-bcf847e0f584"
   },
   "outputs": [],
   "source": [
    "# results"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "AV Game of deep learning",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
