{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['train', 'test_ApKoW4T.csv', 'sample_submission_ns2btKE.csv']\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load in \n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "# Input data files are available in the \"../input/\" directory.\n",
    "\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
    "\n",
    "import os\n",
    "print(os.listdir(\"../input/\"))\n",
    "\n",
    "# Any results you write to the current directory are saved as output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a"
   },
   "outputs": [],
   "source": [
    "train=pd.read_csv('../input/train/train.csv')\n",
    "test=pd.read_csv('../input/test_ApKoW4T.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "_uuid": "34be747f783d5a37611d1db30149161f3616e753"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2823080.jpg', '2870024.jpg', '2662125.jpg', ..., '2898652.jpg',\n",
       "       '2868175.jpg', '2784171.jpg'], dtype=object)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images=np.array(train.iloc[:,0])\n",
    "train_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "_uuid": "53c6c4364132cb314cf49ae2e4aabf5e5fbd3691"
   },
   "outputs": [],
   "source": [
    "img_dir='../input/train/images/'\n",
    "# test_dir='../input/test_scaled/test_scaled/'\n",
    "\n",
    "train_images=np.array(train.iloc[:,0])\n",
    "imagearr=[]\n",
    "for i in train_images:\n",
    "    img=Image.open(img_dir+i).convert('L')\n",
    "    img=img.resize((150,150),Image.ANTIALIAS)\n",
    "    imagearr.append(np.array(img))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "_uuid": "ac68fcd92bb0c2131aa8c1a705eb9b76fd1d83a1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[138, 138, 138, ..., 134, 134, 135],\n",
       "       [138, 138, 138, ..., 135, 135, 135],\n",
       "       [139, 139, 139, ..., 136, 135, 134],\n",
       "       ...,\n",
       "       [ 71,  60,  52, ...,  26,  36,  62],\n",
       "       [ 95,  98,  93, ...,  61,  55,  61],\n",
       "       [ 83, 101,  98, ...,  35,  16,  14]], dtype=uint8)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imagearr[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "_uuid": "564e6daf7754f292f119364e62069c63394f1252"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6252, 150, 150, 1)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fd3bef27208>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQUAAAD8CAYAAAB+fLH0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzsvXmUJMl93/eJyKuOvqfn3Nnd2RPA4lzcEEEQwsULImgJgEhJFGhBj7YsUZQpkaCl50dbT88Wn0WJtJ4ki6QggX6yQYAgBZoSwQNYACSFe3HtYrGLxR6zOzv39FlnZkb4j4iMyOrp6qruqu7pAfP7Xr2uzsqMKyN+8btDaK2pUKFChQLyRjegQoUKhwsVUahQocIAKqJQoUKFAVREoUKFCgOoiEKFChUGUBGFChUqDGDfiIIQ4vuEEI8KIR4XQvzcftVToUKF6ULsh5+CECIAHgPeCjwLfAH4Ua31N6ZeWYUKFaaK/eIUXg08rrV+QmvdBz4IvGOf6qpQocIUEe5TubcAz5T+fxZ4zbCbg5mmDo8s7r02AYxieMTeiz80OCjn01Fjtd9jXTnZjondDLSmf/bcFa310VF37hdRGAkhxE8APwEQLC1w4h/91C4L2OXMmQZROAjCslO3prVY9IiOjBrbSZ8fhVHl38yYZGgmHNazf+tnnx7nvv0SH84Bt5b+P22vOWitf0Vr/Uqt9SuDmeY+NaNChQq7xX5xCl8A7hFC3IEhBj8C/JWhdwt2t7ts3Ui+k9jNg2C9R431qDaM5CTGaMOkGGe+TMpxTMoxbVvGBG0aR0zeCl00Y/x694UoaK0zIcTfAX4fCID3a60fnqjQSXma72COdNeYdCwm1TmMLH9KVGUai/qwYbsm79RNe7/exZjum05Ba/1fgP+yX+VXqFBhf3DDFI3XYTsKWGaXyoROD7l/J0xj87kZNpZx2rjvO/2Ez4+DwyAyToujmRQ7jfd262cEDjdR2EoIhv12UM7aBzEJdmJpx1lsh4H4HRaT5DiLZb9xo0WUPVRfxT5UqFBhAIeIU7CkeytlFVv+fqdjYm5kLxrxw4YpveyRxUw4DmM1c0sd5fl9EBYUV9f4tx4eorBd53czHt+Jmua9QI4z0Ub8vt86h2lgrH6OEMUOop9befFyrNFhGMdtUIkPFSpUGMDh4RS22+nH3d3HYcMmddg5KByI89KEdUxa/khOZR/8FPbCKY7iRkaVORWl75Y+DBOzp4hDRBS2u7jDSy0P1jTGZ5wJMGyy7vTbgWMKgzGpeDGplWRf5vs+vJ+R71xM2bxbnvM7FDwhwajEhwoVKgzg8HAKoyC0p5pbnZfGctiZVNN8WDiB7wDcCFFtT3EDU2joNPs6bh8mFDEOH1EYttiF9p3c2tcxFqwYJf6NUjmIHe45TARjKm05LAqWKaO8qYx1/36/1zHGead4Kr3DNdizTuVwEAXBSJleCNBD3uaoBT9WE8aIDBQHsFh2Ik7j9HMq2fUOhMjt0Jn9qH4vZU7jdU/al63rYsDPYZv7hxGIXTSk0ilUqFBhAIeDU2C8XbC4R6tBbb9Wk3vxTYPbmAYmbcc0+nEgZw7v+D724WUM3UH3GTt2ZRxT+pZbd+MFucdhPDREYaRML71OQZRZKqFBj6cT2PmGG5yCbFq4WTw3D6KdW9/JbhfLNF7ptIO79qpo3MVwV+JDhQoVBnBoOIVhGJcdPizs/8SYNNx3ChzLpArVscSPfXS+GVnnQXJTO227kyg/9TbXrru+t7lw6InC1DAN9n6nMg5inh1UPoUbDDFOsNOY2JZAlc3bhx1DF/wO92/b5/GrrMSHChUqDODQcAoj2f+d4gvGCojadZOuq0McgDJRH4YdbEKl6zR3+kkxfF4NcgvbcxT70aIxKig7JU3Lv+IgOAUhxK1CiAeEEN8QQjwshPgpe31JCPGHQohv2b8THP1UrnDCiaYn/2gthn7+TEHoER9Gfw4ZhNiGgGix82cX5W73ceN13UPsnSAMgxr/1knEhwz4+1rr+4DXAn9bCHEf8HPAx7XW9wAft/9XqFDhJsGexQet9XngvP2+IYR4BHOG5DuAN9rbPgB8EnjfyAIPi51/PzGOj9WBpAjbGQfC+UxaxTjDNGY/9hrTMi1HswH3/b34Fkx56UxFpyCEOAPcD3wOOG4JBsAF4PjoAtj9JNmqiT0AmrKjTmFa6+ggFsuoJtwMupN9ssSUA99uiHfonsZ+ukR8YuuDEGIG+Ajw97TW6+XftNaFRL7dcz8hhPiiEOKL+Xpr0mZUqFBhSpiIUxBCRBiC8B+11r9lL18UQpzUWp8XQpwELm33rNb6V4BfAUjuvEWPszsN211EOdfCfmJix6JpNeQG1zEFTComjcVpjMymZduypSjnvDUNjmmHdk4azu8Lmu7km8T6IIB/Bzyitf7npZ9+B3iP/f4e4KN7rWPH+qV2H3Nh/z87apL/LGGUpeZmwTCryDCrwF6qKM3TrZ/toLX/jI1RVhItdvVeJuEUvgv4MeDrQoiv2Gv/EPinwIeEEO8FngbePUEdAxjGTQh5QJF9O0BMyQ1s0n4cBIE6DOt+Es5y+5snaMxO2LEJ1ysYy+9vKpzCHnQ3k1gf/oThXX7zXsutUKHCjcWh8WgcijEJ3dTks/3EOGnjJlUKHIDlYBoZqCZu5RStLFqLveliJm3DQJ3XB2uNy/XtOLfdfBi/g4eHKIxo82FIPlLhOxNlUWRXIsc051RZn7FLYjMwt4e0f1gqw+1QBURVqFBhAIeGU9hWGzvNE6Kmkq77IDykJqtjGpvXyBZM4dzOiZLQasbzDt3DWA6YSkfVcQDKyaGcy9Aw6iHK+JtSfCjjz1qA0RQxlXl6SMZ/aFr9KemZytC7F70PBENFm2HtnIJ3byU+VKhQYQCHh1PY78Soo4JbJiv90GAqnMIhSmLrdvudzhIdhl20czv2eqTFasL4i3GUmmVOQQg9niLUjVn52vjv5PAQhWGOSWM8elDWxoMIFJoUU9EpHKLM1a6madcp9ODa2ab8UXL4eLkod/hpHAesnY4v2E7kGRrxObIqh0p8qFChwgAOD6dQwo1g5cfiAm4CTmEaGKl0H8FJ7NsoDSjapve+xtlot31uwok6DqdxnVVuqNXh+msD7+mAYh+mBiFAjniBO03EA2GZp1TPzYBJcx2Mepe7gd4tIZgQA8r7KZhed6xrv6wjLvpzF+bVEirxoUKFCgM4FJzCTtithnb4TftL9Q8NpnEYzCEaq4H4hG2u7wS1l3buhjOZOJnw6PZdJ2Lsoko9EEdxM1ofJsCeWP+9nBZ0E+gUbpoDZneJsc1xe8WwBD47PbI/LdkZ25ob2bYxex2zw0MURpkk93iqTzEoMlCoknkn65muB5EiCHPyLPB1Dshi20evbaW8o6iy1uKmMGnCFPInjlnHsPEo6t/6+27Hb+SCPoB+7tiGcaJmhwQ7DTy5g9v3XjJcVTqFChUqDODQcApD2V4nU+70sPbpsvVW6moezLKAMMzd95n5jnkU6PYihDSnZcgtJqCCuyjvbDvtWDcLN7ATymO5/Q2HR+ewV4wTIrDfvdiu/HGD0cqOVZqd1o+952YzSe4E15k9TrRisKTQboFHUY5ShklqrdSJGiky8EfolAmDY6Wl2pIqa3sWdytbXGbF/8ydJLVHuPGbMM3YfhPoA3mbw/pZEqfH0SPtRtdUiQ8VKlQYwKHnFBy2Khp3uQtEcUaeexrY7UYA1OZ6AyJHnvuzIYNAOZFDazGgqPxOEBOGwYtJe+NuxsnyI0oi38Cz4w7rFAKiJn2Hk3J+o5wTt21/cW2AGx1d1244hYmJghAiAL4InNNav10IcQfwQeAI8CXgx7TW/XHL26mDw9Jij2N6KesUet0YaXUIQaBoXWmwdHINgFYncWVt1SNoLd33YpDFFp3H1vaX7ew3CyEZ1M9sb0kZ5/mdMOw9D82hsA8Y3Y8bEPi1QxsG3Zb3T3iZhvjwU8Ajpf9/AfgXWuu7gRXgvVOoo0KFCgeEiYiCEOI08IPAr9n/BfAm4DftLR8Afnh3ZW7/Gf2cRgh9nfVASn8tywKyLCCKM9JWRNqKmP/gLOG1kDjMiS0nEQSKIFAIod0zeS5dHcCOB3Zs1+5xd52dDpwZ5zMNbNc3rYX7jPv8Tp+dnh2vkWLkZ8eDWOy73OlT7vN2n0khhXYfwfUixLZ+GtscVHNd/yacF5OKD78E/Cwwa/8/AqxqrTP7/7OYk6hHYvSi2Q3Len1ZQaDIUuOgFEQ5BOaeucfWee5tDbp9o2PIs4AgSV2ZesQs9aLGdu3YyorvWJS9f1KWdXpsZbnru2vXeIRj2yfHbP5ushPvFQcpPri6Rok0FLfp666xzW+li2O3ZZJj494OXNJaf2mPz1cHzFaocAgx6bFxPySE+AGgBswBvwwsCCFCyy2cBs5t93D5gNnaXbcMJcm7ZdPKO3KZVVVKMtPsApApydxiG4Dzb1hk4eg1lprm/1Y7cVYKKb24IKXe1pHJf9/eMuH9GXbVjUOB/VT6becqDuMrZMcVY/YVYzhx7Xr+7upmOx+nzNHsmVPQWv9PWuvTWuszwI8An9Ba/1XgAeCd9rb3MMEBs1vjCYZ9pNTbyqplmSqKclqdhFYnYanRYf3yDOuXZ0hWNZuPLpIEGUmQMdPsEoaKMFQDegRhnZ+UEgPyZqF7GIayHuJmwdaxlUPk1GGf4pmdPoUF5/rP9HQvowvRO39uAK7TK5Q+19+8i3be4CjJ9wEfFEL8E+DLmJOp94Sy0nCn4JkwzGlt1ABI6qnb0eM4o9uJATg6t8nG75wE4Nk7GgSW4DQupjQvwGPidgCOv/gimfV2DEM/uaIgp2d9G4LA+zxEkSLLgpGT+aAIQ2Fq3YrdhNGWTbL7iUl28nHGcyth2Nqf0YlZJ3xnozaEXUZmCkrvZoz7B6oa454CUyEKWutPAp+0358AXj2NcitUqHDwOJQejeM5vxSyuqbbiYlrxuCR59LtAN1u5O5bqHW4vGyun34g57kf6wFw8VUzdE/k3POCZwB47NsnITfPLJ1eZbNtOJDZepd+YuqQUrly0zQkDPPrrBDfCdj3HAYHjK0JW260nsdZUHYxxmUrxXTtQR6Hhihs94JGxdsX38vBTGGYk9ncCEmSusCnXhYijBsCtUtdsp4RBdI7+tTmejy3PmeeXwnJZ5Qru2jDZjdxdfT7oRNtoihDKenEiSBQh4YwDFvQu1nowzIfjfPMiLvGLm8a2M68emgI3phiilaDKsBy68cVCcdBFRBVoUKFARwaTmE7lKlbWYF2vacXA8FO5SCm9qbZ4R9/+jTLT1vz4lqbpU8fA+Dqq3KE0IS2/DOvfJZAmO/Prc+RxEZkCKSin5nhmm30aHWNArPXi6glqWvfOErH/cQwL8rBnXL88rxT1gHGAezDDn6QMRX7BSHVgKixX2H5h44o7CUFV5ZJGjUTc9XpxQRWnOj1QpK68U7MT2ac/JsXAXj81F3Uv/sKALeEGZdWZ5DSiByXNmbILIFJ08CJH3cdv8LlVhOAdi9ydURhTq4kgSUKw6L/DgrD0sTttU0jE67sEQdNOI0oeN3VA6l3GHb7TrRmQNQY5gW5XZ276WklPlSoUGEAh4NT2GLPLcfzjwMpNWludvooKvkmLG7wi/d+GICGTGkro1z84Ltfw/9x4nMAvOvxH+Dcc0vMNDYACKRmsWFStZ1orvO186cA2Exj2lZkSHuhs3bU4pRMQ2qVm2VLxGHAdkq13ezS+6WpP2hWfjtLyn5zdKP6OFEehK1zbDsOonzfLubkoSAKAu+oVB6ocYKItIYkythsGdPhwlybjh2AW2dXuZSbWK2vbd7GqxvfBuCjX34ZP/znHwQgDjKCJHcOS2kuWP/KEQAut0/Rud2IH0mUsTBjiMWLbz/P2c1FAB576gSLRzecvuFGE4Rh8fd7ZddvhKZ+mqLFTmNw49/VOPds76Y0EBBWRIa62/R133fT00p8qFChwgAOBacwDIOJUodT1kxJGg3jjLTZSZi1O/ojl4/zSz//owBcfXHCT/y0Ceg8c/tlZqUJjrrabaKuxWxmpvCkkZKeNkrLk6eu8q7T5pmFoM1CYKI5TwTrdI+aoXvv1feQKTnUvfhGYpjz0V5s2tN2ZNppl5ymaHEjfRJGWTx2G/g11rgMK/MGxz7sCcPzERSd2T56rsgjWCzKPBckkZH3Lz52lFu+akSG9Xed4VhgrAe/fM9v8JLYeipGPZbvvMa7bjfixO3xFd5aPw/AYtAY0trYfTu5uM6l9Rkn/txswU/b4SD6cNCLdBp92kubtyb92b7c4b8NEx8Gb9re9DxYSeW8VKFChT3i0HAKozDKf6Fvtf8zjR7tntnJj997maWPGkXhB078Kqk2Tk1KCz7bNd+vdJr8k+f9J+asOFETGZ/onAAg1QGP944D8AfnX8AzT5vgCdkKmL9rBYB6nJJlAYnN1rQTpnZY7k7Pl+tj+2Ph91rDYVPU3QgM42iHOYft9D6HjV85a/g4kcLlsoaJZbvJVHVoiMLW7MijsHVAi/yKALm1JNwxd40HnzsNwC9lb+UNd/8hAJHo88ftOwFYqrdJCfjI6isB+O1HXsbJjxiiMv93z/L4p88AcOJzGff+5y+4Oq6+93Wm3h95zuR0tO3OD9FCuVEtmZiwjdHw8sLZL+xE9HbScQ1a0HYqY3QfxiW8w4hVgQNN8X6jYZKfeCmo04uZbZhd//NP385df+UrAHz5378C7jb31ETOm5rfBODl9Sd5/6U38PK5pwGQQU5n0ZT3Q8uP8c27Dadwdr5G8qo/B0D9gmblZYYI1fLA6TBg54X4naBvOCw4CMIxKoPWOPL+QftjTKO+SqdQoUKFARwaTsFTuK1eZ9uTPlFyytCaUraknF5qulWv97n4k2Z3/+sv/xS5NhaKlg45Ks3ufjrscbK2xstqhlP40Gt+lZe9wYdJ/73veQyAX1q5l59Z+ra7/qLP/lUArm40jfhwSEyS09iYxmdZ974T3wz6iOlk09qpn8Oe34vT2c6my5tSfNirTkEDYaCcHqEep6ysG1Pi3Scu8yN/+48AeHHyLIHwpsQnMnPP/XHGPzn2dVZyI3I82J/lSr4OwKKs8yXj/sCvfO27ab/QEIt3z3+R5x81wVXfvHycKMgPjS5hGottcp3A/j8/Tj/lCD74Zo+aHIbd5CbZDpX4UKFChQEcGk5hmPgwDOUzHpUW9Ps221KUEkVGCfjC+fO0lNnd/2v7Hk4FDwOwoRpENg3Tpk5p5ykP9U2MxGda9/DVjvFovD2+QlMaVmF2psNvPvEyAD4avJjXn3oCgKfjJfpZ4KwP6kZzDN8ByszDKFps5xk5TmarnU/DGkc5uTvrw1b40PcDCogSQixgjox7EYaT/xvAo8BvAGeAp4B3a61XRpdV/B1vUpfvk0JTqxk/gTQP6G7aBCgq4isbtwFwNN7gv3vSZJ6PZcb/e+fvA7CpBDMy4ffWXwLAn1y805Wb5gHzNSNWtDoJ+kmbTyHR/H9Xzf3Hj6/R7dWcn8Lhm87XY1qLbpJ0bzt78Y1T9+h7Rpexc0Xbe9Bu7za9lzEdPtdH6xSmZarcDpOKD78MfExr/XzgpZiDZn8O+LjW+h7g4/b/ChUq3CTYM6cghJgH3gD8OIA9br4vhHgH8EZ72wcwqd/fN0kjt+I6KlnyVUiilDAxosFC1GY9MzEOx+J1vnHu5bYAQXSXFTdESKpz/vEx45j0J3Nf53WJCahqyJi3PvIXAPjD1/1rfutFLzL3XLubx64eBWC9XWOu2XXZmm64+FBhbEyS7NQcBrRz+XvlyMYRH65v+8517YazmkR8uAO4DPx7IcRLgS9hjqU/rrU+b++5ABzfTaHjyFnXBU2Vvmd54LI712TKZTUDQIDmRbeYZmVa0lZGb3BN9WkKyZwwxOPOcI0r1rooVZ+fuf1jANwWzvA3543D008uPMEvzL8AgPc/9DqSKHPWh0lJwk7vblrkZtLMv/st80/LW3FrMNJ2J2nvFVuPCtweg6n5dlqYrs+l7OQqlz4fwi5czLd/vwcTEBUCLwf+jdb6fqDFFlFBmyObtx2K8gGz2Xp7gmZUqFBhmpiEU3gWeFZr/Tn7/29iiMJFIcRJrfV5IcRJ4NJ2D5cPmK3ffWos5maYMlJtOZS03zKKxgu9eV4y8ywAr6g9xTvvMNaHVSVZU4Yax0IQCUkgDH1ckJJV+1tDCl5fMzkUzmZ9NpQROV4YS45Ha+b52HAJhfgSSDWRA9GOu9d3gGVhHEzLT2FS7KaOYVzAOGz7QFLZUuJfGfhDh/aSF2Ov2DNR0FpfEEI8I4R4ntb6UeDNwDfs5z3AP2UXB8zuRsu69ZqUitR6MR6ZbbFuzYuXejO8ZcEYPvoEHLP5EXLaznnpeVGHayqjLgpvR8UzuRE5FnQXZd9qV9edGfPhfselgc/SgJl6z+VozJQc7oU5chS44QtfHFgb9lPQOniMKyaUUT7lbLAsn0NkXJPmNAnEpH4KPwn8RyFEDDwB/LcYkeRDQoj3Ak8D756wjgoVKhwgJiIKWuuvAK/c5qc3776sUTbjrf+X4syBmbpxMrq22eAHX/FVAN628HU+u2lCI9829xAdbXwOehq369dEAOQUTH9bC+4MNwE4GiRcy025DakI7O6WA3+qzdClnYhuPXT73nb5CxjjtwKTWi8O1/45HOPkBtiL48+Wu3Z8Zi9+CsN+H9y1r69ja1/MPeailD7VnVKeOzDh2WPMGSWmKk4dGo/G7bDTgGz9baNtPBeVEnz6nHFAmgs7vKxpAp1uD9epCyMyNERGXxhnI0lIQ0giYdj/Wqnca3mPT3VuBeBqPkPNPvPe+Qtu8cbNPgv1Lhv2rMmb3SSpGe2UdFAh4Ds73Ixuw404/OW6GrdYzbYjdHpAJyacJULr8dK57ZTwxV88II/GaWI3E23rvVJoYnu8WxTkrG+Yxd9TIbHlCFKEUyauKomye/umTulrTWBHNrK/AyxIRU7hfyDZ0LWBOsEcV3d1s+FeXijVDSUMU6l5hH5nmoeZblv9ITmgdneKxmH+BOV7Bn/LrR5KCE0Qbncs4ngcwNaEL3vRb5RRBURVqFBhAIeGUyhQZqUG2arh91M6IHah3qXVMaz8kajFudQc2nJreM09EwvFvDTkdFbGbKg+0tLHhgxYVdp9f35sHJ5ubaRs2OtrKuBEuDrQhigwnEquhtPZcTiIg3Be2isOSmyYNHaiwDROgNo6F8exhg3LZ7BVfCiH/wfb1C2lvs6RaxzT53b9PrCAqGliWPRZMShBoNyiKI9LKBX9LHDPPPHcPCK3dz4fpwdYkH1yqxycl4LL9p6AlFkZO51CO8+dKAGCVyTG52Elz0jsBIkIaNvoyyjKqcUpgRUfMnVjF+/hYLwnw0Gd1TCqnq1HGZaPEgCcb4pJCViIVsPZ961svitLaPddKT+Xx02Wcr2n5rbdGRuV+FChQoUBHBpOoaDKSokBjas/Y1I49jsoKfMyLWhfbdA4YlylZVty64suAHA6vsp5Kz5IYF0Zk+SG0lxTdQCOBB3WVJ9F6ZWQC5Zq/1H7OBeyeQDeMfMI5YRrT/dNuvc0DZAydO0cZnYcx1N+FKbFBewkxoxj8dkq1g0z9YnSwcEmgMhcl9JwfWoId1iub/huPqHpVgvy3KfwK5sEy3OuXH8Y5vT7oWtbEBQHEEnC0H8voJRw9xTfM6tcDAJFnpl7ZaDJc1uPEoQ2H0iW7bxnjyUe7YHbOjREoezOKUQxkNLpClIlBwZ8IJ9CPXPP3/3SZ7ltxngxtlVCWxn2XwG5XVYpggWbPCURkjWV09YmQKopFV1b9D9/4i1cvDYHQO8lEd87Y9ykU91nMTTuz2GYEwaeSG1d/EUrC93HJBiLnZ5CHZ5Ab++duZMVoryQy89vJ48PstzXL36txcA95edEyR14WEr1UQSu+F1KTZ4L973MvheLPcuCAYJR7o8Qvi/le/JcOqLg+mPncBTlWGMYi/Mt1u0ByTIYzPWpSyLKVrh+j/HOq3RsFSpU2DMOBadQ3hHKrFyZM8hzSWzPV0izgMhS8DQLeMGtF3j4yVMArDVqfOK5ewG4/aVXeUXjSQASAcv2LMmANl17WlRAyHJJ0ahEj1Wb9fmWmTWO1g1H8OFn7mf5DpPQ9fuaT3vnJesfUc4uvV84qEChUSnHyrts8X/5viI1nRZ64B2W2fJc+SAyKdVAsNugd58XOa5v0+4UkoNiDS5tn1Ll+adIU787F+3Pc0G/FxMnmXsmtaJEmbsQQqOtlSoI1ICI0u3ETjTIc0lgDzA61tx0p5ppDb1u7PpccA4m3nhIP3fiQovrN5v1QUpFLTZWgkBqOv3IXffso3Zp1DMhWWyYRCiXN5p0sgjRNl1Z++wxai81EYzzQQdlmaGnswYK477cUpLYjlE7z2jpkAD7spB0tan/H9zyMa7Z4Kh1VePeyAR8rir4t9/6bgA2z83RPLXhxJwb7dE4bbPhTt6NZda+YGWVCujb73GcuYzKaRqA1coYlnqQ8BTsuynDW5zC0C+iYoElcUaupKtzmH5DDTEPFyJS8bsRR8xvvW5EZAm9WezmehgqZptdNjaNLkoGisSmACzXKaXXGzRqfbp2Lhvdk3aEqNOO0atm8T+aH/diphKOWAxYMbYT5cZ51wWB3cW8rMSHChUqDOBQcApKC3eYS6cXup2iWe85Z6A4zGlZtkopwYJNmXbf4gU+9sh9rqy8oemuGmp+MZ3j2b6xPryg/hznMqNcXM2b/O4lk3i1FqQsJy16uRmK58+c548umqxKL1i4wC+d/CIAqW7TtmLFI/0aq5cNByFyc9ZEwf6VD4Up0/Fhji+7wXjBMaPp/G7O1hjmq791d3TWl5LDTZ5Ldz2KcrfT9/uh8TspKSG3O45Na1HS9nvxIy35pezc/sH/y4pJKbXjYoLAt7/XjdwxgEJojjSNVWujl1ALM6zPGzNJb0BkWOsYReFcrUc7NdzBRrtWUroGTtQEUOsRQcfm4Ahz17Y894rKnTIvmY545fx2GJhzN5v4oFPJxgWTA0H0JLppBm9+pkOaG1ZsbbPmNLFzs20evXS2XaaWAAAgAElEQVQMgMeDZWqP1uicNs989xu/zqe+fQ8Ay9EGJ0IjSrw0OcfRwMp6CN7/pDk56uVHn+V/P/kAX+yZRf6xtZdQDw1b+PLmU6wpQ3zaKucbqTFP3het8Ztv/tcAfDs9yj9//K1uwks5PDHGpE4lYhoueuxGBt/+3kLvU178PohH0KgZS04vDX3q/SR1kz1LC59/X2Z50odWjs5yibLvP4xyp8nv9YwJeDvrQxk7HbaaZUHJ+oDTI0Rxxvq62VS4nLDZWwIg6ArWFfSOmDasdYUj+jKDrGH+W41LjZnJELbNUZKRZdLN4XAjIK+Zexdn26zYeJ1mvc/aitV9xfnO50uVLF47/b5bVOJDhQoVBnAoOAWRCZJL1qmjK+geNc1abTbcDqw2IoK2+b4OZFZJEyz0+Uvv/K+c6ywA0MkjXnKrScFWEyk1mdrviuXAcANX8pY7b/JUskqqFa9MjBLy5Uf/lH8VmqzPn924m++qPwXA8SDkHzz0LsAcN//jd5ssdKeiFdJcDuxW2yUencYmPw6nMU6o7ejErP77gD+ILbvfD63Lr77u/iBQbFibexTlLhKwnQUkloNIaim9Xlja6cWAPT4vOe2EsXfkKca1Xkvpp+FQ/4Tt+lGGEBqVyxJrr8msmLKw0KJ72XCtRx+E+mUzf9buiFj6Zo+sbrkcDbVnNwDo3DqLsprr2qUeV15qdv3VF4UoO0bJbJf1a03HOYTacBgAmx8/zvxFc9+Vt3U5smzKXVlvuHHZUak47H3uUel8KIgCGuK1kkmra70Vr9YQmTX9bQh3vTMbIft2sM7XuHTnLGd/wZgh6xe79I6YuITf/ZmQtx/7GgBP9Zd55+xDAFxTIe+648sA/DdzX2Y5aPJJK9+1dMzp2ARPfWXtNF/pGVPnx1ZeTCMxk/pkc51f/fD3AVB7+TWE0HuKe98txiEK08iEPMwBqLiexBn1OKUeee17YgPC6mFK1+pnlmstNlPzLjbShPnYiGKhVHTziFpgnlda0FfWvIcm01aPJDMybRbhufU5FxLfyoIBp6DBtvvvZatI+bvWXsMPVg9iPQobccq6vU+m0Dpp9AOr9ynCbkLUsibCQHD2e81G9D9//2/xq0+93vTz148xc96UfeSRlMd/1Dzf64eQC4KafV5CPmcJ3oakXQgKlxNWAu/dWLRT5cHgIi+bjYeebby3uXAoiILQEJj5Ql7HCUnhhkT4d0ds3ATobwRwwigNhdD08pDGT50D4Mr/cxvNi+ahF8xd4Lsbj5tyESxI092TQcydSyY704P9Bl/dWOSzm3cB8ONLf8qL4ysAdI9EfL5lErY88O17+Gev+k0Afri5yStWjaxZizL6WTggUxe43h14S79LMvFe5eOtKPsFDHNH3krAtnohlttQKOOMYs7L+uvtGld6ZkdVqzHBpt3plZ+vz6yLAYF39Zr5J17XtE5KbHwaeYT7riLtvosMVHHPyR6z82aSdHvRdcFFo89gKI2x9Yjsd03hUZK5BXdts4GKLEc0J8kT89D8NwNWnq/JT9jTyn87IOgYgvWvHn8jV68ZLvSYgCsvMeXGqyHYgLx+N0LWMxbnjd/Llcs1v8gV1K9YfUtT0rjHKDdXVmZKORfYk8uyVzSO/0ylU6hQocIADgWnoAWEHUPKwi7kVj7La6CsNjdsC7pHrU95XXHmmGHxZ+MeCsFP3vZxAP7h7N+gZb0T/+iZ57GaGpbz5078Pt/30F83Ff7aUdrLnh7OP5Vx7scN53Hsvg0+ddlYL95+4ut86hdfC0B0l+RnMGdR/v2LNcQxc/9KKplfbDmf9kx47Xqj0TNs4xBkVq+R1Pr0e3Z3STLr6ONNZ1AE1JjvtThFlQLEer3QOcU0an1iy3LOJj2ubBpNdiH6AERSMRP3WO0aLftax5vOGknqTrsC7/SSK+kyZh/7QJ2wndOfN/+HHUXhmNQ6ETJ71uoOLm5y7X5jEu4uSlZfbwLSZh6sc+JzbcIrRo+TLzYQRUBQaTOU3ZR0yby/J384RltOoRjrwPY57YfejIkPSlPKWwgEfrNUuaBe79NdM6JN0OiTWHPhrQurPHzNjEv9qn9IRYKjX+2S16zna6S59Y9MP6MPR8wtWk5Rpmhp9F1Ca9Z7pq1aCZKLIauJ0bfMXBFs3GueueWPu05Xkcehs7jpXoBsWhEtF4bDKWIvAo0qPC+lHpAUdOb1EKLkRTouJj1g9n8E/iZm6L6OyeZ8EvggcARzatSP2SPlhkJ68y1ZXVCzbGbWEPTMnKJ+UZOsecJx7dFbADh7RvGG1z3MT33+RwC45xMrXL3fyHobX1vkUx3rNbb6Y/zF018B4F9+75upn/UvF0L++xcZovIv//gtJJfsYn33g3QXzQB3b+vDppEPSRQvPf2ca/Nqr05kF6IU2vlW5EpwZM6wi3GQu5fdy0KUhni27Z5J7WTLlY/em210nd9DIDQduyilDSAqJv+RZtv5ebR6MZcumyCui52Q2hGzkDY268hnzIQMOoKzx3K0PV4vaqbccewqAM+uztO0CsEoyLm2YYjKPccu08tM/ZdunyXoB/TmrTiSBo4Tbp/URG0zTvEVQW/OmpHPZkDdjjn0FmNUZNqZzobI1E52pcG6CYvZmDy2E3y553wGzm7USOqpm+hBmDuiOOhWrVxfOv3IeZ0KoVlba7B4zCj0MiXZfNKYmx/R89RW7Tuf1zQuW5k+Ejz1g3WiDVPnrR9bI58zcyubTwjbZvHm9ZC5s4b4iVRx+RWmz8Fyj14j4/QJE6z37IVFsG099z01ulYsWf4czjw/e2KDzTXrQRkaImC985Eid4RAl/RIuuSdiRYoK+IQHEBAlBDiFuDvAq/UWr8IkzzmR4BfAP6F1vpuYAV4717rqFChwsFjUvEhBOpCiBRoAOeBNwF/xf7+AeB/Af7NToUIVVKsaog37E6RQX/OkL3G5ZxLr7AecUc1t54xadLedfIR7kgu8/r7vwVA7UOpS5VWEynftNaDu+JLvLFudoqf/sEnXN2pztlUPRbtQTGn3/wbzuHpDTX4y+/7RQBmROLSwCsUiTC74Ure5uX/+e8RtKzp9EiKttQ5XAtYWU5tvwTCspLhcgchoL9hdhqykudaLedFZwwX8vDZk6iepfRKEK5aTqEH8bpwHNbKksaGa7D4DTi9ZoO9epr124wCLN7Q1C9bhk0K+rMBgW1P1qiz0jBZq4+s5vTm7A4uYM5qtp9LZmidtibBXBN2tBPzgq5224tMcVq/c29ZwlqECVs5Rx623FQ/p78QkzUstxYKLz5IgQ4KpaVGZHbM+wEXVk27bjm2ypWNplPunlxcp9W3u3YunfOT0nD5acNqhhuBE0VVXZEsdZxZWn95noXLljutCaTdjfsLAqELth7mngQVmvs6p5tOCSlTjV40L0BoTXLVmjHvaqCPGDETDMt/7pLhYme+VqN1v+Hijn0xI2xbTqeu6T5hymq159Ez5noy02Z2sUffKh432wlZ1750qZ2YU1a+1me7Lg5D78IqNckJUeeEEP8MOAt0gD/AiAurWutCIHgWuGWc8qR9+fWrGmuRImprkmvW/nu5x+LLjQz6c/d8jLfUjYXgNzbO8IuPvoX7li8C8KVzt3Jq0SzqJx89ibS+DadecoHzXz0BQJ5okhVzvbeUw0LKkSVTdpZLlmcMyy/RfOsZcz6ujHNyKz7MHG1x15Jht59Zn+fUJyS5fT9ZI3b6kail6CybH5I1TbJqhuXqC2fQAo49aV542M7pWN+M3kLEI+fvAGDurHDjoiVOfKpfTgnbXubSUqBDa8Y7v46aMbKyjgKWV82kDNY6qJma7X9AvZcje5Y1DiUqMZMnvthi5pwZSzE/S75sFmLnRIOmuUyeCIKuJuhZa8KGQoVelIjXTbkz5wR2TSEz7eoLNnoEnRQd+cyEIi34Ykne8NMyXDPtX/jSgpPVn31VhLgWI62J+vy3miw+YsepJkgbNuKxq7n1kin38ksF3XlLlDqS3nrCzGOmvNmziv6sXzT1y8q1udisgq6i8dgVI94AvduWqF+w8r4AVQ/dWBaY/3abtNmw4ye48wPn0O2O+/3xo8bilVxtIz5jrGG8+RUsf9UQ7+zxgH7TlNufm2ftCPSXLJVe7jG/aOZpuxs7senUkTXOXTaEp32tgcsMtAuZYBLxYRF4B3AHcApoAt+3i+f9AbPd1l6bUaFChSljEvHhLcCTWuvLAEKI3wK+C1gQQoSWWzgNnNvu4fIBszNLt2qbbImwp0jrhlbVrmVEdqdXccDqF0y8w99/7K8RHDcUN+uF3PkBzcP3maCoO37jUdqvMr4F9/7hl5BHjD/BpbffxZ3/7jMABMePkV80YdDBC5/HpdcukUdmdz31u2d56sduB+DMB89xu9UQ9xZqdKzFIujNc3nd7KBiVlC/1HOa+GQNzwqHgni9sM3n7vr8Exk6ENSumR1BpMrxfVFLs/C4ZX9D4ZRJWV0StSxn0clJZyOUVcKF7RwVme+bz19yvh39WenELy09uxu1NHkkUJa7ERrHfq69K+At9z8DwEPXItq/b/qZ1yC2nEpWF8jU+xaIPHDcXeOiYv1MZN+fIk+sF+rtCfb4TrJGk2hTex8UXQr7l74tCIhaie2zV5QtfTqhtqLYOF2IP1C/Yv0B5gKEbUzY0aydCe092nGN0YYkyyK6y9bb8KqgtmLGvH0soD9jnbQ2jNgDxlkpOzaHthFRYSt1HE33SExsucDk2TVUw7RZbrRpXjTcWfMidO5aZvO04U4W/8NnmHnKcApP/2CD/ntebToXaO7738zcbD3/GM1Ny3U9p1GRpHPEcFed5TqtE6bsdCFn7jHTlgvH6jQv+/dcGB1UdDDWh7PAa4UQDYz48Gbgi8ADwDsxFoj3MM4Bsxqvfc4hsAH50UaKsos1r0lmnrXXvwnrZ4xWPL+vQ2c5dpNy7c/fzfnXW5Hjla8mq1sN/f2X+Nb9rwFAdgVB17yQ9NYer7/3YdqZeVkPvvgu/vwrjBfkJ4++iOfdfxaAo1GPF84aPcYjmyd46OJJAJaabXr/1zGCnplU/dnAsfxpUzp2s7McENjgoGgzJ40F/TmzeAp2HAzLWixeHZRyAwS4xdJbiskT4V54ezmmc8zGzccw+3RRP7SMSoVsVhN07fc1gUpABQXBKtsBNT17unYS5Kwu2Mt96DmzGwR9yBPc/7kd5/oVI5cDtE4E5Pb8nKAH3SPmezqnCHqCeMWXV7w/BAMOa0W/gh6OqBz/fJ8Lr4mpGQmO5nOa9dvNWGZ1QbRp+98QTqdx/IvKjd/MU2s88ZfmqN1ndE/BQwskK2ZRB6/c4Mic8ZI7vzHr3ey/Ok/v7ozbT5pKV3sJYESb3gN1QqtT2nzrURLbr807m2AtHvf9/DNEH9TcUzdlf/r2P+cCorIZxTtf/QUAPvKnr6Z/i9GD5DWJzoq1kJGstonWzJKdfVqQzlrdw4mQuadNW/oLIWHbbyrF/CuI2TjYs/hgj6D/TeBBjDlSYnb+9wE/LYR4HGOW/Hd7raNChQoHj0kPmP154Oe3XH4CePWuypEQWE7BsGtWYyoFvXlDt5oXUvQPGSr9qpNPcqbYJoBrL25ytmOo65sWv8mPz11yv/W02SoSEcFLzbUn002esFmaP3T11fzokc85ywR3/ZFv2G1/sn2Dj37DaFIsXvCS/4Hbfs/Y0HvzTXc97CjCrtdqF7tRXg9QoXDKQqGkY+/qF7poK0r0jiROUadC6YJuVGC4hML6kCfWPRyjHbf+WuSxINq0Yxz6HTjoG1+BsG/ZzE1NVjffj3wu5MmPmXwSvTlJMufrcBpubbTxwtYftyDtF22D2oq5sX3MuznHa9qzsEIg+4LE3qdigWVOEAon1gQ9/x1tuBWAzVMRR7/rPJv/ySiOj3z4q8hjy/Y+TX7OcHRyfg7dN+9fhCHCnuGRXbiIfvfrUJ8xc6Z+JXViTmu9RrBgOIgjzTZ/+RaTT+P//PI7OLK0yS1No8SWM4ql2LzzB9Sy24lf+8aHeOSqadf9Ry7wJ18yY3nx7Xcw23+Or37LWHnOvP4cTz1zFICFL8U88DXjJHfnt3pkVrk4+81riI7hAHSnC7NN8hNm3qokILLzZ+6sordUKDoFoWkWKhJOLCtzX6NwKDwahdLOSSXJU4qVoCPpzEMqFNw+bxw/fvbYA/x+y5wm/f6n/xxKCy5esoN1j+R3LpnV31chZy3/O1frMZcY/vmpq0vOqaX9X5f5gzMv4swdhpDUw9Q5H80nHZ7bNOXmWnDXvCFEj68uu2CgVj8mq2u6x+qunYUmXii/EOINRW/JzPBoMyfoa2eZAJwjUNpokFiTolCaxrNGCRst1cma1lPyYhcdCAKrza9dCdnYsGJWImhYjXvWkLROWDl60+sQmucV/TnhJkpW91aCznFB+5T1t89w46+lJwI6MIvVP28IDUC8qejPWOetOjTOW7FQ+wWe10AHmtTK7nni66FEFHRgiASYawWB27xNcOWJo8xYi4E4fRIVm4e6p2fRLzSLsna5SzZjrq/fntBZNvfPnLuDbDll9kmb9i/zsvfCZxK+dcHolLLZnP87f40dc83mF5f5fM3IQI3nBOv3mkbP92H2nBmcP37oecatFfjMN45w+yfM9bN/rU/nE7dw6nHrhalPsHjUOqk9m1G/YHVkzciJoldftewCsGrWzFnormSqnY4qr0lHlESunUlYptptJMW946CKfahQocIAhJ40HdAUMDd7i77vL/w0AI2L/QENb9awyriapH3MUMn2CcH8tw3F7c9K0DD/lGGzWidiFr9odn3R7kJoHWQWZrxdXAi6R/0J0joQBB2v2Q9XDdXuH2sSX7T+C4sNx9bVnl0nnzPPb97WAK1pnSiUiNrvdLK0A2LZaaB2VVNb1c6eriVu12yf9I4oi9+EZN0qjQKvgRe5JuzkyL4dg/mYjdts2jJltP7mH9g86eP/CwVcbTWnvRw48UNLv+tHHU1kNd7mxBbzNa9Lcsv11FYy736M4UgKP43aSs7mLaFrc+GIpqUgtZJV0DM+BAVH1F0qnaSocSLX1kjhQoG5cp8ga2jHRSRXJJ0XGC7w9PEVZmIzFx6/uEx6zcYanNzkbz/vUwD88sNvonuthmybem/7/dwpOlvHQzasaFgoUgGOfE2zeVo6ZWfjgqa7ZNoz97SiYX0WVu5NiNqFyzbMnrXz8lRM2PVjG1/rOt+SvBY6R66oldFdMmLOuTdBctVcbz6rmTmfEXSsD0Wu3DrJal6U6M9FTrkoe8pZqBDwx7/7vi9prV/JCBwaovCy7/kpwLB8ZLbjmx2wbGE2X3MBNERe6nnynUfo3dl1QSBhPeP4b5m3Wb/cJ20Uzh/ebBak2lkI8kiAEI5lU5HwmlqtvVNOaXGXzWbFwi8mbFEuGFGiftm8rKffIRB1870x20N/Yd5pxheeyH2AlvCaeJnC+puNgDg70yH8kGFdr7xCo+q585B862u/Rseuyj/5wguQy2Yizja79D5vTLKvfPtDfOWi8SNTSnJ0dpPLG8bbsfHROZINT3xi+z1PhHNQMuNSGoNAIPsFm6roLVjTX93rB5INTR4XD3gCF7Zz0pmAaKMQcwKyRiHm5M7qIlMvfgU9RdfKze2jktr3X2KtZUS2Rq3nRMuvfPkudMOU+7r7HufzT50BoNnssrlhCMTip2ukTUH9imlPsqbc+6tfSZFdb4YsTMUqkshUubbliXQsuYqlMx2LzMdoC6WdriK51gelyeuh+03YtSdSRdCy8pcQ5HYjDFp9xAWrOzuyQP/YjNsI8nrozNAA4aYVLxZiopZ3bEvtRqZD+NPf/tmxiMKh0CnoQLjBU5EE5xVWR9uOp3Mx/QUzwbO6H4x4FeKv1NwCi9ciZFpwERGBfcEyk36BZ343DjsakSvymqXakXDuu0IJaitWvtfaEQsdGGUfGGWeFn536816+VzFgsiaqt79ms/xtrmvA/C/Pv5DnJ+f4x/98EcA+Lf/+C/6/mxotyMHfU3aMhOkE+Ucu2aJyrmIzftSRMtUdCJZp21XX9iWxDb1+Ntu+ya/92mTi/Le5iXqp8z1TAVc7M5y/LhRyH2rNsflu0w73/EXPsMVm6+ylcfMhobAfP3qSa5+zSjGfvhtn+XJ1hEXkNUM+3zyoecBcNtHpes/gLIuy1FHOVPr2R+SvOPlD3K2ZRR9X3/2FrI10/7kUsTcKy8D8NrjT/FUyxDCmbDHZx4z/if3/FrOxg9oXnrKuMCs9uq0bDKXaEPAppnWm/cmLC+aoKeleptn/tTUt/CtLt0jEbKQyWOvkGudjB3XpANPoEVemE7t3NDaKYTLhFwFfi7ELZ/9pLcYI1PlCEm03vdJIKR0XKyKA+/mneaIwiPy1CzpXEjzGfMO01lvbhS5droTobWbmzL3m5/aRYafSqdQoUKFARwOTkEKx751TtScrI0u5VZIoGF90utX+m4Hmn10jXPfu8Ta8wx5v/fX287/PK+HyNxm0930Xn86wHEmeWRMe850o/A7SCScvKtlSRNe2gmFdbwqfpM5SLtT5BnEa2Z3f/DarfylBeOgctf8FZ49sUTDnmeZNgWhdYlPG8LtNHksEFbuVc/Nomx48NIjGUHXC7wf/tD30F8wzxz9mmZjxVhMPvLkazn6nGnYh//9m+gt+HbXL8HmbeaZpTYce9CU/ZHGa4nXLHc2q10AUHJVMmeDhn7rk69BRxrmrbnvaszCt4sgJm/eC9uKpGB3a9KJC0tfiPid7iugOPSlIzj6iB3bSLOZGY7k95rLzD5tx2VGEM8VMlubjU8d58szx+xL8BaL5kXvBfqNL5xxKfzkQ5oT58wg95Yiwo5yHGee+OCyPBb+XWbah/VrOwcKll9BUBIVt+MUZDrIXeaBdE56eT0iXLMvXeXoemTLEU5EUc2E/GjT1ZdH/rfkaheVhHZsQkIrMohsMDdbbmNaZH9ozrbrcDiIQon9yhJRCq7RREVwUdsv3DySzjyHaNJ8TqGsQrG3lLjFL1PlZLiwlXtWKpIUGjRpzUcFyy4z7cxrkfCRgOWTuaTwfhXoQTk46CkfaJQExBeNSXHl/bfwvit/C4ArL42Z7cE/e8AEkx790gr5rDUp1kOCjnnBq/c2kH1ff7Go1m+PaV5UtI6bfnbOpIiOdwksJrJIBbF95uLrNc2nijGDdAbmvm3+rV/zisN41TOPyTXh6o83tFN0JisSFMhzVompIGx55VZilWGdo5Ezqcm+N6HNnM+N512hImpraquWeCSS3G4QRx7ysr5MYe4pmw6uERKvaqJ1H/hUiCzxhnKbSu2ydK7ZjYt9pyjOY0HQVYTdQsfhukyy6vUYWghkWuRUtAuykBhyPSBKOJGjNE/QGlHKgxb0/dwQmSrpJEJUbCNrV7uInpmAuh6jrViQnF8HMUdeC12dhRI4udp1bekeq7uxMBuhbWMpZ8koVOJDhQoVBnAorA8zS7fql33P3wWsR1vod92CMqeNknJxw7NCMlX0FkMyq8SaPdtz7KsOpWOboo2+o8Yqlk4Zo0NpHFds8WVTWzkOQWaa7rxNQ59qz+JHgqitHFuoBQOpsQqrhlCaoJW66zqUTkvdPRq72Ieyki7oKqOQAtCa3hFvRhXaO6QEncybJxcS5ympkmAguKjYpUw90ucziKRTyAoNMit85+WA00uRMizazNChcP8HXf+edCAcK7t+puYsDjLVA/kHZF85zk1o7bTkKhJO5NKB8BzMelra6aXRsJf6pkpxIgXXFm1mbgfN64ErS6YKXXIyizZz95tQGh0WpmIx0H8deA9NWQpiA8+ey1w50VbmiqB4f4GAXJu/QG+57ll+pUlnbDq+lZ57l+1bZ5ypGwVIb1aePdsl+rZRFFOvkR8x2ZqymdjPi80++Uzs2v7AA//w5rE+gH+RKvQRXWkjcJMtanutvMiUG1AdS+L1nFpamBQl6az3+mo8avIu0O0hZ418pmuRe6F5I0bHEmFfat4omXq0dppgM6nNZZl7vYIKvd4DjGnSR/wJ+nOWxc41YqkIS7Sya8nMmdmyg9R71+WJ9Ka+mnCilPGa9EFkQeonfNBXdK2npJFpTVlhV9O+I3Hfg76vx7gWe1NZVjPPhz3lxtyUberbPJ0QtX0OBR0I0qYlxBKENR0GfS9+9Weld/kOBTIWZEmx4HPWrZ/F/FOZs633FkI3wTvLdZJ1nxpNh6Fn2SUDhLi4vnm65tl95YloVjfp4wqCUTZDa+F1SoYAlDT5qWfZhcYtXi29mCHTHKkyd0+RJ0K0UkTqefiE0m+dPsGaGXPViOgtG1Pr6p0hfaMeQmbGv6PwfN28pYF6gwnqizahb/VF8ZqfF3lcH9CV8QBjoRIfKlSoMIBDwSmoCKc0A5zPgYq8KNFd8qGzneWE5kXLbq3nyL5y3EGe+MCj5JlV9NUVW6jwmuN1KMSmKIrQtRg9YxNsdlJvfw6E0/CiNXXryxCvZT5lf2g5g8KLLJVu1yjEGBgMg9aB0cwrp8QUxOumzVk9KO1u3hYetZSza2fNgNrVzHE0eSJsRmVTdqHcE5lGJcLdUyQhFZlhkV2qsxKno6Ug3vQ7YFQo2oT3v4g31aCiLdfE1jtR5t5OLjROaSg6uDZmdXOeR6EERXjnsKsvjJh/wiodY6hf9qnl+nMFB2cfcyKfDyPPY9/OoKex582YsyUKq0hPk0ee88kSMRDjMXCcfXEehRIEQvtdOPSijQ5B2LRnMgu9R2GqENZ5TosGeS1w49FvSp8ioKUcd9ybCxynohJ/1olMzfzPrFfo3BOazAbB9We9WNOfB3fwbFCKV9nFSj80RGHTxKCggbBbyHQaXaSoLuUTyBrQXS403wELjymXAmzuiTW3kESWw6xxxNH1BC0Lp5AMoSwfGATGu2zNZn8SgtxGOmYz8WAceklu7s+UNEKiViEAACAASURBVPl16V9kIBzxkn2T3wAMS1tYBVRgrhdRfyqCzVNF3givyU9nhbtHh36CGmeZUioz5QmpULgoyXLuSy38BAPoLZUmjPS6DJniUrPJfilisVvytLSHtER2yPJa4MSp4qBVgKA3KCIVOh3D7mt3+pfIoXfUin9xTs+ageMVwdqd9njA/uAEF5mf6Hnsg6WCnhcTjPhmrscbmvZxa85bhd6CNwProJTPQ0Hfsuiq7LykzXgU5sqBRaZL5urIP6MFqKSwygiCFBKbqXzhcZ+YZ+XeyM2ZPIGTnzEdnX26S8vOC4Qx2196g/VcvCuHK+a3Y1/QzDxjzNud44ULqRWjiumr4THGQyU+VKhQYQCHglMIW5rlr3jtfdQuQof9PSL39uPGuTaiawNAjjXRoXDaX9HuwobdNmo1Fychshwo2FWBbhhNvo5DymeOqUaMsi6nWSMgtRxB+5gknSnuCrxPv8Bk0ClYTum/irxkTRD+OoAONCIvnikpsHIIrHJJ+KMSCDulTEehiSlQNnNPclmSNguW1dvSlcRl90FANlOUK1CJHjhKXbudnoFAqXTW3BW2PVsuMlNPe640bnHhxy9IVq3Id0Q7DgYJeXGwT0cgMkE24xV6xdjULoWuzXkNd0+vptwBwzIz/SrGTyWarFFYEoTjzlQIYcuKT7FwrDfS5Bzw4eKDXEuRRUpkuG1ThdbJreyPUBwVGGjnzxH0jes9mJiK+lWbjfliGwJBbp2U1u+ocem7zECfuO0iP3jLwwAshxv89uvvB+Dxr52m+UyRAtC04QV3mUzfJ+vrPP9+Y3341/U3c/oPPIdQIE+EEyV3g0NBFEQOM8/YXGFK0180HVSRcTIBw7I7B43jdeeNpgJB+7h0EXj1u06x+KjhC+OnLkPXJqnobX8ejZACEXlrhARHJGKrbwCYWWy6QJX+fGiiMzHeiP25UrxD6CebDrSjN8qrCkCA0F4ORpUsFpEmL3QaiXeKCbsCbb0L88QsrDQsxAztRK7y4kP4xapD7RKxyL4gn8kRXWtivCQdm9tfUqi+cM8XdWZ1fAcSkD3Im1bj3hPu/MUgLZnpUk+UjKlT2LJMvwaJfjEW3tKYJ5pwszBjlnROfYHIBdGG/T8XjqiqyBNPFXmipmKBDgoCA/1Z35+sod1ZpqKUjEYHhsiAEb1k6omcceTynqeF56yxEtj5s5Y58+bmXTN0FyQbVkxOl5Tz6Lz65WP8+leNd6YG8hN2ri6m6HPFTgBIOPfRMwBc2tR8fvElAMxl0JsrxFc/rnFLuyRFu0myUokPFSpUGMCh4BSyhuDpH7DHY/UEoWUauksaHdhsQ+d95iAV+YM96hcErdOaPCncWQX9BbO7R40a6ulnARBxib1KU7Sl7DpLGXlksUUhCdRlQLNmM/bOz6EX51CJzfswF9OzB4P0m9KlOctjMcCKlmMpRO4VVyr0ysX+Ak4ZFrZ9eHZ2LEMHkqBj/TmWFLI4y7Ku4ajhjtRm5I7AC7qQFSJGZsKgC9Y6WcO1U6hgwBYf+GMK3M4adI0zl8gLHw5vXTF9KhxsSuJF4Lmp7pJES5NXAozlIW1al+W2z0cR9L0jlRZlfxA9kIHauKYX3JFw71NLfwZEkHoWREWCtFlOaioJ28V330+hILJJUKOWGggdN/3HPeN8HmIfx5M2IrdT9+dtf+wzCw9JmhdN2fFan2i14JShe8JoHXsLgVOIy1yD9haTsOVdmLNG4LJdEXkFdl6a8mWnuFE4FERBKFzgCgqXdThZ8drr2lXttMKiZWQsMD71jfPCsWIi16zeY7p19YXHqV82bFmelCZu7tlAmRqHocIjsj/nzVOyr0sspnDa76CvnWeZdOy9N905f3NVCo4pHasuQtvn4sCm1NeDxpnR0lXhrBoyM3I9QLQZErW0e/m9lcC1R0WS/JwhsGHLH9gS9H1uCKH1gDOPUNq3TQ06YxV5FrT0XoPFxAyKIJuSlUNkyiUPAVzKuDwJ3MSsrRhRMFmxh6lIQTprRZkNP9nLsQZa+nE12n5NZk3EKqTUN0osviLeLHkkCv/+deCJQtaQzlyKxr8LhQupT5vGu7Poex5LP2YlRyihtJsTWSho2JwNMxc0YSsnLHI1CEF/oUgRHzlLhJbeElJbyZ0XqAoFWd3nLGU5cG2RuSdeQd+H/qtAuPDtYnzGwUiiIIR4P/B24JI9MxIhxBLwG8AZ4Cng3VrrFSGEAH4Z+AGgDfy41vrBkXXksPBY4ZHoX17jkn+hacMn9QCvmOocN2m8i91l5T7I5qxHWT2nfdp6N3Yl+aJZRUEjI+9aBWSgmJnv0IjNTJqRim5xnJgW7uBWpSR9m6JdSk2vZU8WbocEG5J4rfDi85S6nLdBS+Ey8vhOlL7aPhuOwS/kskdasmajRK/pAVNpbY1SrgjlsvMIpd3JUzooeUQGfmEXvxUTeeC69IFi5ZwBacMs0KDvJ6xzWc4Dt9gA+id9RqiCQJpoQ2ifMGOYR8ItsLRRysegB02qAz4HpYjDoO+jGfNEuEOBRc6A/0E5+lGFXqejAwa8O4vNwxDC4nkBkdedlCN4y4jaPvBL5t43QyhN1gicjiGrl1ztA5x3Z17DcS2yxmBwlYL5J8xu2F2OBvQEnqhpl4wm7Hmv1V0cOj2WTuE/cP3JTz8HfFxrfQ/wcfs/wPcD99jPTzDiDMkKFSocPozkFLTWnxZCnNly+R3AG+33DwCfxJz38A7g17VxF/ysEGJBCHFSa31+xzqk9+lW4WAKsPIZf0Xoroq82UlkNt14oXFdE4StYncKHYsetqHTNg+lc6FLb65DzSawYbMNyc2AoFfIan6rCrrSOxuFkPQKVh6SFe9kJZQ36ZVZdB14rXR5ZwLLfpbEB5d7r+77HCgv98tMkCU+PVrQ106OFVqQH/OyfjnPYTHGZgf0Dldh23NaJqai+O7zKsqMAZlaRYPOWAXPrRJvqos3vXnBhZrbdsSbemCnLcrK6sJxUFHbi1U69PUX41D8mMeCsCQmFe+vnC2rbPZUgSCPtuh0gkIP4LkWs9MX4psJ406LukXJdFs2NUuvO8ljQa/wwhSmnv6MjwspRM60If2Zoann2gCX+zLsQe1qxvrtPo9G8YzMYPXuyH0/8nWbp2MudCKX3IX1Ya86heOlhX4BOG6/3wI8U7qvOGB2R6IgNO7Yrjz2MlHc0o5lLucLTJvSvwhhJmhxPFtWF05pJXJNf8F8b53ywUEi8ybAaEXCSm0gL2JsUvsbpZE142Uz3i4etnDK0LBtRIRyqjfHipb0A6Q+X6FQBZtqf7MyMhiWryirPy8HzGOFp2Kypolbyk24dMafiiQUbpaa4KrrF4gKQEjt+EShtNPRmIQ3vp3Oi1L7iZXVzcKSPujTB4hFnqh0F6SPPlUC1fD3a+HfZ5D6Cd6f8adqIbz4YsRKc1mmJsFssWDSOeFctaMWXg8UC7cpCM0AgQv6Xg7PS/kny+2X+SCxlakmbnkRzIkmgpL4VT5s1xOOPBZIpR3xErl2ysF0Rrhku+XcEAPEQgraxyJWzDESzD4Fi99KbZslq0mh0NTktcC1y0VMlojyKExskrRcwfg1WlQHzFaocDixV07hYiEWCCFOAsWRTOeAW0v3jXXAbPPorbpwBnLprzBiQeHw0psXznc/L7GuWlruoFGw/N4nP1nTJYuDcE4tWdOzpSo2HIRzrJnRToEmU0qWCEFYol1u188FJJQsEzgSmSee1c1rpZ3R7cr+r1OCpV6BFXS9JlsFfgdLG4J+6SQgkUNvofB8007jHvQ1ncXCYiBcHopCW1/sgjoQTsGotSYtHUTrvC6F383DjkDLkhlQUxJlvLIybUq8AOHbH/Sslr0kfjhFq6A4fpF+03N05XmRrCuToNRaOWorekBBWpyRKXJvvZApA8rZQtkI5h0VY1ZwrGA4hX5TunvA51fQUqBs41QoEF3/3XE0uecApfVuLazfQc5AKLwT80TJkqK8AlWmGhnAMau2LywoBW75lD1MphGwcdoeOtT2iup+MkXrwxD8Dubw2H/K4CGyvwP8HSHEB4HXAGuj9Alg1lAxQZM1hbSjWogBUGjIPbvptMJBYd4rJmyJfV30efpnn1GGnQXQ3hdCptBb9Cm50lnzAbPQi8UabUK8auroLQnnKSdyXxaYyVbUr9PSwi8FdBVWCXeQbIlfyxOfI7B+tZS8RPrn89ho/6MBM5qPIOzNFZPKlwU4caPQQTjfCOEXZdnKUEaZcIVdPZinUpVkVu1NhVHbmzqDvs+HkTaNJaZ4Jm2U0sdrTwBk5hdO0CudPBX7PJbFM0XZWd33OWorutaEF+XameeymhjIxVjOTSFTTccG25XTARb1SrxZ1lsmfP1btfzaiRIahKBjz4oIeoKaFY1FWfxM9YDIVqAYsyJpD9ocnwdGd9P9/9t711jrkvQ86Hmr1nXfzuU7360v091zt8d2bGNsg4IRsogci8QgEHKERC6WIoQtiAhCNv6Tn4SIIBCXCJQoCXJsgiAwPwLYQQiEyDhkxmPP2O7p6enp23c/13323utaVfyoqvet3TM9fbo9/r4Tab9Sq/e3z9571aq1VtV7ed7nOSx5zuoQivQzCT/ihnQVu0pJ8lfhk4pHRPQuvHbkfwTg7xLRzwF4C8C/Hj7+9+HLka/DlyT/7JVHsrOd7exa2FWqD3/qff70k9/msw7Az3/YQZAVJSHPShQGtwFzIAxToA2ucNrCqnpfo40132EqbrrP/vvPLV9SKAJWvlhKkq86sSgu0iYaQnfD/3h1rNjVhwXv2lkjGfbpfYtun6RPfr69O8fzShOLpvCrfmjB981OIbnXL4jJRrs9tbVbxGSRyQnDjJiiLmvBGIihThKAJOdfrC3jPEzlKeRYC3IitGtjTRwy6MFhDOcZ2ZoAvzPqJJutjOPwiRJ06DBRW6AoZtFaO+jBIV/FRJ8WYBKSUGRwLKtO1olaVk7o9rQk0UyiFnU+Ms2cKYgTg+kO7lm8JByqTh0zR411Un0YhI2brMam0tzWnqp/2eR6kxUP0BRy/W3u7wtGMS7HLTwEh3JE7LXpIfHIXGD1CtdjLBUnhGO4C/jPJF31wi3RfBc9hadi77lgHGtmicu62Zbx4l567ZuF4kLQ7xEuX5YfnL8ZFxWCDd8vz4Rabf28v3G58agB9v+Rf627EV2gU1s/RxiCW16eApNH4vrpVmLRYSKxepq9Vj22QoG0pAgSFGe+slvoM1ayKoRTUA8OWGErYx5DhnydlPFIjjlMCGCZOkKxsnzz9zPy3ZWIiLxYqrRMWOM0YX075+NljduiMo+EMmOl+JxNKXG86eX6kfVVlkif3x0o/ptuZFMwZSLMY5JKSJj3eG+YIoEzz4S8pDodpQyZC0u0zXz3YIz320PN48zXljsLbU7CY5nRFhgovWfSkDHrrG/QgmwccY6clhLlMM15/nS7rVjGFYcE0akHAE5CMJsl1aAkX0BJficlvGEY9BVs1xC1s53tbMuuh6cAcXOaG0rcxxY8wtT9JAvoKOIZkzThb9MHBou3JKsbXTl9JtLn7aGEC9Wxz9ZfvBLgzIW4mu2BZlBPbN4BvCtdnQqJKKDYFSarBEh1KYzFAKTdekJejj3BCUSXcZhK45dTUmc3uSRaaSRACRyWWnFZbS5ajsrIMUy5DeU1uYzTqRS8JD0G67uKj68baVSKGfLoEeghCZkcMHkc+x2IzzlrLYpAc+FhvcQ4gepESgtpH0i/yPi8Us8q63yvioCkDCjA0cdSvAars62qRAwRdOdgKkI3jxRqSCpGUolRg+Pxm9xXCGL7tedWCLu7kms26O19Nu1dUIN4N2PiBU2bke/n8SBjjyjfiKdpcj/PMZyqnwxMHNvcqfhzNvUuOocsMoIl4dkH2bVYFGIFAfAZf524ZbFikLWSlU2n3Wb+IkYXanNbCfikF/BSv3Aoz8INVgHNC4GkZV9j+o5iV4yMPCDDjARf38rCNVbECDKnPZinOgk36NJxrOeU4Pi7fckVmDJcuHgjxoctWAwlUjhiliwu0Y1NOzC53Gll/KkraXPpHSlWfr5ijkKvwbUyp0ko3pMbTI3SXOXddcV5kKGQzk5lgOaGP+nqwnCuw+aEfiYVjqx1HJphLmQTppAeCTgwotVT2oevG38O8feaQ71FR8eLylwWDnKQEKMDipVUOfJGQrbmhsLmpp+0YilAIpv53A2Hdk66ZtMyoktIdvQgVTGyMeSKFRBBlPYzzdeyOjMJtRuhfhK0IxdexiB+bpwUyb0pYkipKLLNgDwcj6sWV7Bd+LCzne1sy66Fp6AGsLqzzcStGivBkatRElA2A4cC44Q87iDKy13K6q57oA6dluWZZ4QGfLa5OvEfWn4CuPgeg8VrQioau+yGmdSZaRTQUXnueJfXjUNxLmSfahAOhGItPfxqkJpxvnZbPQlZm2o9iOybI2xl76OL2AVYb9y5ff06Ac+kIUOSjIw7rSloK+M9ll6WL55/HIxKGJs97j+Ahc4N1Ggw9kq+E42Szkon4B04AeiYAujf487mIauftYJPSbEZ+UoqDE77ZGv0AtI+DJdUXMqLbTGf6M34rkqH9jB6WgrVuf/xyROb3GfEWfusc1vakFsJ5cSLclrO35TSbl6sPB9Dcyj6GhEwlXWWSYXbA40+JI2ztcPmKHSSVgTdCsOW9y7Db68FMOVh0gKwip5FKlv/QXYtFgVHwOq5oKXXYOsEYz9/N5f4FhCAEuBQnjumC+/2NbuJlCDKyJB/mP1X0N4IrmTvUD8RJSVbCDCqPJOegLTtWRlpurG5R0ryA5e8bkqFcSoPSAwLmOuPXWaS0iMFqjAEVzg+CBkwfRQp2oH1XY0y3MhZ4xjRmDeWKdE8+Uf43aXg7k1OQEKFDkikYjVhCA/FWKskjyMIumHq3f005NvqAwgP6PqOZvc/2yTNXZ0//xi+OJKQYawFqamMEJkUCc9Cu6/R7ksrulrJIpu2Xo+ZPBRZKwAeCgCpWC5MKztpGReZzIsj7/Kn/A7xfNIwzbmEOl4RX/+8iZuYfH+souJYUjEYHObvCkApLmp07nxfRVS/glSmhonaQkRKfkcWK1pdPXy4FotCiqIj42DChWzmiuvCKY25HmQRwDEABTQ3/Kl0+9IcpEaH5ijkJDYO5UWcRNmNb/yOw+ztDUzg5x9rzQmpfCN8/Lqz/mGA9yS45z1Iy8WGrHTXMiX4oc5Xcl5Gbdfz00SpGpx0Q74nJl0FCbG4UMVzc5q24v0UHchJp347v5CiRXXv0MfdOZNd23d2+s9kreWkm3RR4ttaGa6NGhXPS3luWA/DlgrDVHMeKNX3yBsLFzEbCcW9zbTc7LRdrjaFzB9csvgMDmOb5CSSxGo/k8Uja13iXcnDXh8bYWfSYfHnblzDD+I4Udw9GUuXAFBdWNhVTMY66MYyVqafCy1+fTzyAz7WOkEhGiZfiWVfXuQaxxwKaUK9m0uuIuWL1B9CdXqXU9jZzna2ZdfCU1CDw/7XAytSa5jNOdVlTGnCbAbetdXo0NxIVtB1grxL3ONhQegCIrK8cJg+EKan4x+cbJXUYsVimBHzIJLVW3FrdIudjjmE4Clo2ipD1seRJsvBbiTkSBF2saUX8M1csXEpbY7KWssejCm3vQv/GxKmRLfaaSlF2Vz4C4ZZ+C6HJlJlGRL+Ckqo37ey/7HJZ5Trwc1mE0K/CMw/rWMXfZwqOBLPpk89lSFpMHNS3iQLRiSSccijcpX2iMboLfYzLa3BTqQA1OBQtvHHtvs7VJnE4Y1LclfbfRWRNTzbWOSDwxiFjknyBY7A3oFLSqBkgaIx8jsKrMqlBgmNTK0wJs1aPfeoSB6KRgftLM8hSLzjvLGgkMfyfBJJlWgWS+3bOZzvZNdiUXAZoQviq+1Bwe5pvnEYYj+7gQh/AlLegof8Rlc2W4MTNaaSMqDNwfTaLiMmLR1m3p2MCkP5xiFfSh4ihi+mJFRn0a2T8uhYU5CB47Ph0MBqQncgyTid3mxT+W2X+aYsAIAiIUutZVFIJejgvHwY5yh6h0lQHhorSsIPx2VINQgKNAvkJex+J8nN2TuWvz/MxJVuDhNEYO65M6NrD0rQigbvwQZIYi7O2eTYIuvkIc0biyLxbqMrrnogXwueOqILQdvHICuJX6dlgcnXghS0mmAiolPTt6g/pUK6saRsc1ks/UImXA9uoqSbtUsSvQlOxHNfSlixvpXxJpfCxru55rkp1iJNN1aiYkWF+hbYePx+ioC1mSSEAcnbxKToVWwXPuxsZzvbsmvhKVgNBox4qrKwuiUro0+sxBKSrPLFyq+4EVNuC0ifuZPSZbZx2Hvdvx3ZlABg8sjvMjF7nm8ssrW4nNGGqeLf9T0Nwv/grKzIw4TY/cs2bqskGL2JNLEVzy3+ttcijJ6OVEI8S2/8fKisxB6Rghh8ZErwrpmWPSdPTOKWui36czKy0xYrizzSyjeK5d+HSYKA1J5XgDPzSetwsZIyrMu2XfZNTIySH2P0XNp9yeqr97TFb25GgV/J3KvBJ0DbQ/97lLRY91PxekyhmGhVDeI1YHTQEISjU+/pN4jm5N9j8HTqkwA+qtUWWWxM9KVks4Zoq6qgM7k2unPsBenWbrNBc9JRsYcY7/l4nqoXgthuX0uYbRxiJGLTPoqrOwrXY1EgI7F3dTLAhonY3MzYlSqXSQPLgd7qX6eESw+QTKsaJZQol445CnXv0CV5gxTmqwaNITw81XHiytN2zb29KS5ukdTD35vxnz4aw+/Kg9/tqS3aMJMDs3fDDTI4dv98qUyOH6XRssZ3JUYOxH6mhILOphwEjt9vD/VWQ5nVQjWXsgI3h5rLwB5FSjyXXN7t/A0Z42ur5eYfprKQp3ybXptB3rfZdu6AeRed42vp9DbjModLsTsxIlzdNh1c9H+bI+kyVQk3BiXcCn7+iCtTNgPiU+UxM/4zkb4tnnO7rxhnYAoJGXzjUjiOS6QExoBLiItCKyhKW9DWAs/xvxModdZaT5SzFA689tAPrlhZ6CbeP5ZLnaaSnASuXnzYhQ8729nOtu1aeApA4n7Psy2XS3jvwS571kh79VjRe3ZnyT6bUnaX4mLEOsh0R3lywLuwKQNzynqrBvCy6ZT0wpt8m7QUJFn6fOVgWxmLUJgZdPs5jzmlI3NZ0qxzZvhcUpzEmBDX0uh3xJgZJyfNUbqTJp6UcTgNmawmjBPBIKRsR+8lhI2IvmLlmL/BZf54Y8JszPOZHNNmyTEgqNVsbTBOpV05eoP+XBxMEfEQlrENplJCPJv5Fuf5OyGzn/xWeSHjSatXNiNpMVaBs4D/hqTdfVvPQbQqCMNUbQkLx5CtvJDksieBFWyCYpyJC3qWkuxkPdRchGCdknHpwbKWqu4sxqmGCchEPVhkQYhZ95bnbCgyPv9sbaR6cUUVNOCaLApOg2mzUrpzH5P61+1Bhm7fvy7PhL9ADW6rpGWzpEsuRRoWOebBRV++pDF9GC4CeTDSNHb25YT5W/47+cZwCanf05JrmCh23U3pe+T55knccqsJpsjC8TPOJE+ODcZSXP5iKeXC1d3kBl8Kgs0mTVNR2iw2UqWZaN0LA/YwERWkvW8Kt4CpFKozbMebcSHuLEwRFy8pbxZLw12OplAoLkZRwnLgh5esw1hHIJgoL5kk+x0Xfo6dJ9IZm/IJFIODSTPp4QExexrjRPG/1SAdnDQ65Jd+xdaTjEMBNViooFaluhG2ypn1OG+2FyiKD2ty/3mko+MybBoOjjmEO8FJlSyleC9WntSGw6yZ1Mt171g1HU5xrsUp4lBWGQ/2UiYgfzfSgbu5VWxVnOL1t3mCqP0QtgsfdraznW3ZtfAUUsox3zgSEnKJrmO+sVtMNtFF6vZ87Ti686YWl3f2wPJubArC6nm/yk4fWmm7veWx9nGn7meELjTK5JcK83sjvz9EKHRFAgVW26zTWWO5uchq2hJgiUlPm0c2nzDmUvrxUyCU9z7CcTaS1Vajh8xyDT5XrNloNSEPO1V16tAvwq5fK3ZlnfYJq2Eml59DkVqxKwsoTqBdviieju69BFrc/Z2Sen62MdKGfKQAK1UlPtaUkF86JhiNnh2ArdZnUxEzBqnBIWf2ZKA50ljdDTv9OsGvzAnlRSSkkDnOOrfVv9LNVdLvIcd0lPQ7JKI9+cZ/PxKvdvtJj8VEKkHlmWMos81FQ8MU3hviCtYorEhOA1kb+CAq4pZ0U6TX3FevYgi5OcokZEma41ARy8aRS1msAPzPuJJdi0VBjb5kBmyHDNW5ZL+r0xH1sX+9vi15B1MDcMRNJB0g5a1R4lMvsCrH5BvkiY8JuwTJd/iqv8LdQmMTmH1NKRdLN8lN7gLHImepidc4U0hMW1w4CSuCMnDaI8FoQZe4mJPEde4c/65TnhthLCQm5UpAJipG9akR7sVKhGX6qcJYFkJ1lmS5nVJo9+O5JBUHJ6g9m/mHIl1wmUF5LXH3WBMmT6SS0RzE8QYwVSRNaRyKpSRzotisbh0mmzHM0fZcLN4ctwRyI1/AONW8wPnOyPDgVIrp2m2+/cALKtUjOmMomK9d0kka+kXis3fiOA+WlmfV4DisAQAbY/2pQrcgjAG9OmqpbKXVHzU6WCP3YnEe/n/pMH00IF/6Es7FJydcks3XDpu7oZo2dSxxQEaUxr+rqtPvIzD7VwD8CQA9gG8A+LPOufPwt18C8HMADIB/xzn3v3/gMZzjm2+opNyoB6nnNzckgQKSFXP+tglNLLK7taHcuLmpk5yENOes7yqGOV++BDRrxcxKWevLcoB/aJmRqBD2pXwjrc7c6RcXqYK4USlfOa5rO5KOt/rEgqzfrfxBgenDgAeYSs0+XcSUESKZcUIwud7CY6RsO9GDuHxBSxv3ynKpqzr3c5ZSxEvHo4NNyqtc0jqVmH6c6FADD+PUKvZc1wAAIABJREFUEl/rzqFcRsyA5ArGiph4tT7119ymu2Y45lCrRLWbtpKWDHPPCaaU0mWKyEz1HExOyBKwRjzf0dKW+Gs/V9vJ0VA6bfeFSKa49PciIwytIBLzleFFq58p9m5ckKcDfH5o8dbIXrDX2rA857qNzLeSqDS1PMndfoblSzl0G+ThjEN1Inmt8jReP5mL8lTOPTKNXcWuklP4m/hWgdnfAPB9zrkfAPAagF/y50PfC+BnAXwufOe/IqIPsUbtbGc7e9b2kQRmnXO/nvzzCwD+tfD6ZwD8mnOuA/BNInodwI8C+IcfdJzo/haXBu1+YPldEGYPhAsx7jqzex2DMYZZhsnDkVfaYVFAjf60mkPFu1Z56ZCHBprpQ4flS0FI49zH89wi3FihKWssmqNQPWgFLOQI3GiCDbZi12IlbMBe19G/3y+S5pYw9ghsGicK+WoM47ES6xayZtNg0e/75d5mGlkrZbBULchmkodZvD0yorDbV5yVztYGxZnBOI1ip5b7CvqFRhZccVP4xqN4jKxLxmPFi8gaQXim1aNiZdk7GiaEMnh39eMOY63hMgl/YpY+RReub2v0e/G6SK9FdwggEbqxeRADhg8/qycRUSooyPLMYf5O5IJUaA6lQSttpc8aCQUmT6QJjawvw0bQUz9VTBXYLST3krXCW+FIXHk1ehQpe2EAhiKEpjkha6Wvg9WydBJCxvTSt/EI3YagnkgopeL1q7Xosl4mMcoH2Hcjp/DnAPz34fXz8ItEtCgw+x3N5ITmRlgUlhKHz+5LD77Tirn/xrLkEozugO5AYyy9n6eTkkx5YZl8pDq1HKuqUVzc2MVXXgQSzKMMzRHCWKT0mCLwoCQHkm0MhrlG/VYbPqfQ3BHoYIwX87XlkGecKGQbQbSRddwQ5i9qxBxY5Jf+STCTDOWZf10/HGELDadjEs5w8tJp4tIbGQu99t+ppuI/2jIDSNxXq4lDg7rx9XDA80LqPnYiKmnoogh7TpCHMUwokoYsI/iJ/dcagOSBcJkk6oapwvxdvyo7RaBwzfd/r8fq455xZn1LsevuVMBZBDxIeSFNRNWpAVn/hGfrES7U9ftFhjE84EOtgtJ0uJyJOndzJBTx04cSIpicACVkrz5xGbEF4Id18qDbkqeLc9Tv57CFNCtRAo0HPEoX8Lkp3qA6QUCq0WHyxPAi2x5ovs9Ty9aS6NWNAZmwcO1f/VH/A5UkieiXAYwAfuUjfHcnMLuznV1D+8ieAhH9GfgE5E8GZSjgIwrMTm6+6FLegYjU6vcyDMHFTbHvppQssCmBdiaJw7EmXLzivzO7b3DwWviSBVYv+h3cFITJQ5HxNrWCCe5veWEwf9vvNHozYFgU/DkulZWKqxKAxvydHuNUymDVyRCOk5S9Eg4F1XuK8TEKqNTiMquRkLkYfhAuPuXT1fXxCMsiuqVnR57GhKy48inNW0ROAtjiwVSjC/LpAl7qZ+JpMN5+Y1E/9NtzVWbo96I34z2fCLIhIzeSHhzKIATsOQf8y2GeowthYT/31PUxzNK9w/quvzb5Shie8k2B4jyBfQarLrwrHhOv1ZlJyoPSuLV6Lk8qJjLHenBMuQ74cDQ/8/fJuFeycO040Vxq1r3dEqQZppKczNdS2br4RC09Jom7T2MAmMV7wCQMy04SsuWFNErZjPhZMKW/lyKATk8kIat7y/ejuy3M2CnH5bfTB30/+0iLAhH9FID/AMA/75zbJH/6PIC/Q0R/FcBzAD4F4B990O/pwaE69VeoX2TQrZ+IujUcV4+1Rn4Z8gbz7fp6vpGQwxGYp+DyeQ01+BtZdw6TR/4YzVGO5mbI4o5uq29+WGi+KetjzWKjuhNX0ma+3Af4m+P8U4WU3jaWb341AtN7IazIFfr9iG70TUPluf+NyWMDUwYlqjsZTAgFpokc3sn3FkJttrSoHw+oYulykQnvfy6Vmckjw4udb/qSmyjbjBzTdwe5NGvNiVGARU7o9mcAwkKwEXRiP01yJE5UipyCNFStLVTMdRSip1BeANXZiPKR9xDV8QXsgceeu1wjO/Sh4DDTfJ0iohAAlCHoxm6pd8frR4VUKfJGpOneS39XLB3y0Fw0TjPYWz75QMZhrEUVqjoO6MhmBBkL1QXFrCJjCr9hkkHFUNBZySMYqYT0U4WsEwq1bqFx8ZKEjFGk2BTEuQq/DsZj+HIm09MVUm4cawWXB3RnJ8RAapBcCX1rpPG+9lEFZn8JQAngN8jHiV9wzv1bzrnfJaK/C+D34MOKn3fOXT3DsbOd7eyZG7kP0Sjxh2XzxQvuR37sFwCEttpcwCcMRBkc8nV0JSFNJ53fZWOd2JbShtrtKeZTsFnKogNcvuw/c/O3HNZ3BKeweLsVpJ9LQDMkuILmVlqj9yv69L7jcUZQT9YKim71nN7C0ecrh4Ovedd8rDXG4L4XFyPOPxlc6bUks5YvZsKUlCDeAL8LRC9CDdJnoN8r1x7VsjqvAxlbsbt9caXVCK7sjBPZYdJkXNSojOzYWWO3MASRTi5rLF+/YaK2BHKdlpCnnwvD0DBL0J1rh+pcsurRGyovPGdD9Hy6heJ5GiYKzW3ia1OeybzEDJrJCS6Tv2WdY64HW0gbf3lu5Z6D9/aYfDZXuHhFGlKiR9AdApOH0SMSBKQa/ZzFuVVj0iORE6NdvTapJHS58c4BzW3i0MRpCVnK05SsWEKFVASXDPClv/4Xv+ic+xF8gF0LRCMIvBCUxw2aO96V6+dCeZW1wDALT4ETOrb6zPoOwtiN5oDmVqg4nFl+bUogvyQ+3uxt/7Ld9xny+KCdfbLiB2Hvmx2HLKffUzGoxWlgc8Mf78ZX3VZMqXvHKsApRXn9xG494GNFHBqRBfKA6CMr+gTdHkGN/jPzdw3rUTgdaNJiSS4BppAVivjxNiSG7UkIR8bQtJXkOKSzjpiarjty0Bu5qaO7qjeh7BlWubFWvMDY3Jc1AcBUWpq2nHzeFr6pLR5nmBE/CLp18iAbyUmQEhr29sBzQwhsHNCd/2Bzy8Fm4aE8FQk8QMq2UcVpcyeeG0GFUES3jud5rAkuwGzIek4OySmI7sM4kXOZPHSoTsVXj8K944S21NWtBiyIf5sffiWv9eCwuR3yK5cOOinLFhfSwZlvLIplQH4WSngkgQQ8dvWkwq4hamc729mWXQtPwZSEk8+FhGCT81Jlc0katoeSoU3Zdch5rP0wjzgHSe5sMsVuVb6UBLZuZXc1BQUxlZickdV8/VzBfQTNrQTfvwLu/GbMcnmQEbcOJ5BVmys0t4MLQj6cAUIlpXfYBH6HFDyje8fYiGItjMEmEW+JIjFxp7AjMUjHZr4RCgCye9JSnTVJaocC7iAkJIulYWxCtxDmpPqBjAsE1I/8y+mjEbYgUUJK6OBSbgXdJjwVo4CabOZd9ihms3hLEqKmVInmo+MdsLmZc3ORGvx1zlfi/jNg6lwxnFr3Ap83hXidEaK8Jboahu/xFwI+Y/DPynJVyY9BvIGYJAZ830bKgRFZsPJAzSc9IttsXTFx7XsyZJysdrX0YjgRw1KedVCNHw81PRAwK7Yq4MpYSVI8NvMhPIVrsSiQlXKj09L1NsyIO+nylRCONIdSdvE3PcEwIg0ow41EIxgpSMbh5HP+rtrckRj68FX/oj4l/lzMVyxfzji+NbXjGL468RUMQGLlePOnHIHFOgEoGQcV7tzpQ+M7DWtZJEIVMlQ5wqJw1sMEboLLFwqeFxX4I/iGXUv2OmstZ7jVYJNOPCk1jlPthUwjIi5xzT0FmH9Zn1guY6YxvBo9JToXZXuHMiykqnPcY5ElTMz9fsYNSWr0Qq6r5/2/Z/eUKB81AtixOTHgzCZNS+XSgpxjBWYvj6bC3I4ifOKSUpwDd9mq3kENghzNT1sgVGKGecGAMbXuAJM0Ny1qLlfmjy6AsHhkZQE7KcP1yxkpmpOUHb2YjGIehZQAptsnrF7w3ymWjvNDqfKTKXwTYKS8N3UNRzX/VgyNssYm3B7ghkAr69YH2i582NnOdrZl18NTMA6z+35XyS9HWR1LxSttxC4AgG5EQswpn9Cavx2+v0p50oS7YJhlSXurd1n973pYb0wa5RsRBinPrNTWzwTfPn1ssHwxyHmNIhQK+IRo2kZbXHi3IV/2DIRyBNhSQDazd8etrDYTxALQoXV49iBxda3zScrwMd1blhczpWKcxTAV2TXfsx+SeT1g84Td2EkloLyU1l8viSfeTARb2dzX2/NzP9eqM7yDknGMczCV5nOpH3awL3hPbax8uBPDufVzihN9LoGQ93OFPsB/p49GTvrCOYzTjKG7KZu0LgljJdWjLam5CGs2SfcngGIi158c0B7FqsJ0e6fPSTpYP1GLtqkT5qzyQnguyDrG1PQzFVr5wdcmemRZs82CFb22YiVdwsOEACUVp9grEq9NrHipQXNo7LSArb6rrdNPw5xOFXylHz5fS6zZLzJ8O565bGO3FozVi/U23XbM0GeEyeNvLZWtn8uDko7/zt4bkomPsSkAlGc9V0jyywG3Hnlf1gb3npV/2gE0BpDPpJAmpsNyu9XZgRWPivMeFNzUPgB3AMBUGVToPchWA/q9wN57OcANiklfthcSCV98SVNKpXGMxXKAy0Tg1HNhhtBiIjGxzUn4JOoU6UhBszLcvOdyPUwtoV17I0/UpFwS03s18Cpg91OKd3LYEp2J1yBfj+yWmzLwSSSAqVRXMlWA5kan1nKsPkz9+OPcjBVx49MwIQFPOoASkpjq1HIIN1aKcxzVmShir+/qLRTpMJPFXCfs2GQdp1+sTqoSmSwKaW9EPMe03Bg3o1gCBnxonZZkq+O4QOHKdi0WhbSGvpoLo0+2IZ4sNTomrfQXUVbmrEk4Dl9QyAKirD61ciN3DuVZQE3uZdzzboOgamwu0a3BEGTPPAuP4++kiapq6YN4cj7RFBNdw14lu0muOCY2OVCfSNnR/z3sqHUG3cguGBcfL+8WJNgaIec0dQZlhG6cHFAGRKjeDNwoZUstC6lx/FCN08wj96aC3GNEpN7mg4wPTtbKYjmWBFMRNrfj7ZOxElcKBbY5uDw7VsR1ed36GzoSq7iQ+AQ8ZFkg3w7lSbxmeQJ/tjCVEj4IgDtgXebRjoD3mlzcdc8Hfp01/sGNvIh6sNyEZeqM5z9rBKPQ7ed+XOGQi/OB8yCpvsbQCB+IMoAaoncVZqpx/O/4MHcL37UJ+I0o4mn6qTRnpQsq4L09leBxotfhkoVADeBGMxquvirscgo729nOtuxaeApksRVfRZAPnIiEmJIY6858dOG77b5kaasTtyXAYhJOgvXdQPE+J+6tH+Z6S6bblopX+m5P6MSUcaAY92rC8jO+0d/LfQvddkoHlqr9kAH3UTgVBGgiLXzjoHu5FBHIY3NikNZklPLcONXQjTAH2ZwYrz9ONYvvdnPhVki1F5n5ORzHu+Ka/6ZZal7i3uJS0H02VyjOOjR3fPb74uVsK8sfPYpi5Xg3zC8Nsk1sQtPY3Ck4X1GejRgm8dokTNmFQnsU8jBJTqRYjhhrzVUO3TquMrmMuInOVIo9oG4h7ez1iUFx3mOYhwpSLnNfXPRQXQRZSSgQQ84IAtKdZY+ivaHZA8hay3kkAMjWcv+Rccg2wvsR4/zqVJi201yRLQhlyNu0N3x5PHq0arBScVDE91axkjZy3UmuySVt6x9k12JRAITvrrg08oBVWshMnGIXrD6xGLl7zWGstFB8W09qCXi3TpJrQuJaXAqRRnU8YJxo7mevj0d+kNsjxTFlfSoXe5xobG77z5fnFmOtmYzElKLqZArF7jcZL2YLeFSaLyMGaG4tNfT6eGS3trh0KKPaT604FBomCu2B5sUzW1sm73CKkjheIMNwJDDjwncY6ipiGKTZi2wiwZdDkpYTkrKtc4At+Obb++bIeZ1UtyNrpDlsc0ujOst4vMNUoQ2iurMHomq1vi04BVNJZ2mxlLi9uVEG99l/pzkk9OEBz1qp7VfnVngp0wV+sOgPigRPIPeWLcttYpNg5dL4cl9YiMtHKzQv+iaufOO4/Lq5nSOLfBQbCV8Bfw/aUkK2zS3N87x1rBCKmZKYGjAKAsfnQY0yN/naYvJENsJ+HpPrWshfko30g2wXPuxsZzvbsmvhKZAThZ5+nkF3AfyR6P05LZncZtDMjDx9bLH/jRbZia8GtC/Msbrrv18/Mbyybm5o9homjwbO6uvOIFsBupUGgjq0WBeXGTa3gtdh3daqf/j7PpZob+RwSuTTx1rYgF2GZNd00IFcs1h6RqlYrvIKT8KCZBPCzugBbG5orG/F8MOXPnlH19L7kQqJTh6PKE+iACOh3y/DGBVsRujnkryaPvD1Nd2MyG6GtLoTJKTejFChqtLerLB6vuBrUKwc8nVMDguDdNrinq8kGTxWgU7OxDBNsfs9vyeVpOJ85ORge5AxotAW3msqTzs+5+5GFebZbCd6WXQlEQnKsi1gkFfy8q9NsS3SE22Y+Kar6Ia3z88ZxZmtDVdihqlUEnRvedde39FQQ6Le1CTU9LR9n0zf3fB5mUlA+raBvToAplyuMU4iiatlT2msianXTCHsVvlTpmP7A5tTIpvlOfLiDS5imwdfa6BCTEqDQfNi6Pohr5BjXvA3fHVusHjL3+DZqgeFTienNGbvhExsggPYPFdD9Y6FOx0B2aX/XHHvDI5u+ve1oP6yjUFxHGkkJjCFQv1E4uB4s63viECubwjyr5cvZ1viq2REXbm96VCcx5KcNMcUF5L91513WdnNLqUao3uH6YOwqD1Zw+mwkOSKlZNsVmDxRoMuxOtjpXD+CT9/9UmO6tjP3zDPkqpKgcsXIqejP07Kvxhr9n5REMyFiMK6LdRk1hrhIsyIBVKHRSaqXpUSdGRnuSpUng1ePWlehPkwfG7ZqocL2JR+r2D3ubiULks9+AUz0rONlVDIwYIbmpSRnJTTvrkqduAOM80l0awVbEd0/QHPQF4/8eOaPGiRnW1gQ+7EFhn0JkyacTB7AcNRa4wz/4A7klDQll7FKlv6e1OfbUCDv2Zq1aF4w0+0K3OMt4Iu4izfKi9f1Xbhw852trMtuxaeghosZu94919terhChhURiXrdYbjhu37aw5wTPsNMo1sI7Rg5DYSkH1zOu/byZYXmyPu75ZlUBXTv0M8UmrBT18cjhr1IrTbjBFBxMQBRGMVYdDf9WPRgkS97ZuFxJLXk6YMBxUUfvuPYxa1ORq8YtSeoyOje9XvZVhtsXLaL056RgkDoVwi7WL7s2Qtpb9bcl9Ec7W+FYKzn6LznYJJehogo9fqFIawx0tJODli87Xe9/LyDPlvDLvx8djcnPP/dYS7CqVqAOKYUFznfAGOVob0h4UvEOagxBRw5DstcBsyCWle3n6M5ktq8zcCt22QnvJuTdVx9KS6FZblbEEyhUQXcSP1kZPzBMM/4mjtNyHuhsCPjGE/itIIaIm2a4gRidQqUT6JEmPdqAWD9yQXGj9XsOThNuHyl5vOPHqXNpPEt3whmwVeiFFygFKzOJCGvZgXawxv8ORZTOpPzSrEUH2TXYlEYJwon3++5CPP1RPrUa0qqClMMQV0nXwOzwPy4uem7+mIsuvyYRnvTz8DiDSSEIY7pwuEE9VedeoRbc9Mf8/xTGffAq0Hc9/I8KRn2UjYdKy9TVoTSUdZIfElWUH+wDnlYIPwNRJxHMLVCdygLRHwQi4ue2YjNJPONOwDIGHS3pli9ECnfC8zfDQ/Mgd5C+kXuxerCojwd+f1s2WEaqhyOAITyVntYSCVitBgXct71oxB+Geubg8oIrBpB8bcKBQoXTQ2J2OtFi/HAPwTDLNtCcY7zAuu7eTiXJCejgPpM4uNYySjPDY6+vIE+uQyfIwx3vazV5k7Bi3J5PrKiklq1oC6U9165gfWdHF2oOKX8A2qUkp4Xy1U8lrFWcCp0tk4JXaie5OvtMrJ6ZcGvYyUqXzusXgBUcPlvf3FA/TiEc6VitCko6YY1HskKICiHlVjdEYRvvvIf3PtGi/mrPmFl5hU2z0/4fGK5PVL4X8V24cPOdrazLbsWngIcsLkVwe/C/LN4yzCz7cnnChSBJXjy2PAuO3sQvn8z7q4Oz/+DMwBAd2eGJ3/Er+z1I2kKmT6ymL0ZSEO7ETQYXH7GL/vH368ZJEVO3K7Ll4WDYf/3gfpRyNa3I0yVscRXvuxZjMOWWaLNYNnFt4XC5pbApqePRgbf9POcXW5baOZc6GeE/LbfTVcvKPRzyfgX58InoEYgD2FOcWGQbyJvHLgnQ42Wd3kAUL3hHo58bXh3NXXG9XdTKZx/yu/01XkBR8KOnMLUyUolafJIoMV2ViA/9hc2f+wA50BD0Gd4ApTvxC1VxmXmJTeR6dYhW8davPFNSDd8stlMMvbIslZ6PFbPFciCB1ZcVnz9TaEweTJyZcDmUonRLbiqMnliReDWuAC1D+dpHPa/HiH0lj2FcaLYU8sbwzoPeWMxf9vx9cguOlAvUnHjogrXYuSQY1xUaG+GluzeonrcYXI/kudmMAHDsnylQrUvnlYMP4eZTvprthsFv5Ndi0VBjcDeN2P2XhpVyrNB0HHnDuNUbjwTJrs58Cy5N78YVgwLPP5x/4A7JcIam+cdTBHdUgXAxyKeE7HgjPPimw7VuahSnX06AEEOLHRAp53+gMNY+ztn+sjg4uMa64/578xfn4kCdgXUAYdenRq0AYgy1j7GjWi/i5dzLsMCErJ0+4rj3tm7gzRkbXxVIy4ey5cyrJ7z36/OLd+4y5cyxEtcXkhJsDo3UL1DvycuZcw9NDc0soNQZRiEs0CNkofpFhpqdNxEZEri8EV1jktt+UULE7Ltqh0xHk7D+Wvky174BA5L7kZUg+WwwvchEB/T3JZxFZfS1KZ7y3kEQMqoZDXWQZl6c1sjv5QSYHOkmFinPBMOg6yzWHzTL4r5WYN5LAFqDbXaAGEhszf3QasmHMfBhcWMuh7mKIQPZQbuzcsUnCK0hyH8eLGUytLKcJir+4zRqV4X079fnntFr6yNZCzESuOLNwbYoDal25EFgPSm4FxHXJyvYh8YPhDR3yCix0T01W/zt79IRI6IjsK/iYj+cyJ6nYh+h4h++Moj2dnOdnYt7Cqewt8E8F8A+Nvpm0T0IoA/BuDt5O0/Dq/18CkAPwbgvw7//47myO+kgHfxI/hodbeS1fTSYfGWJMoiFLVY+xba0+/3qzMZLycOeC8hKvPqjnD6R8Ju+CMt8n/BZ4jv39/D9A1g75v++GefzmHCqru5Q2hejBK+Blj5VX7xdYWD17wLMk41VA9kl4rHGRN1HRTmb/vPre8WTGI6fWQwVgqbmwEO2zgGZg0zIPf5M9QnjklQbSniMeX5iPxywPoF763Ux5aTVuNUIwveUbm0rMvZLxKW64WHSFch8WgzYpCP7hzag7irELI2npflnoR8aaCM5V2vPBtQPApJPy2dmS5TTE1H/QgVKkn5ELAMFBO6jkMbMpZBOaZWnGHPLwYGTzlFoFE6G4eDirtRq+Me2RM/lsMHBBfDJCJ2112Zw2UK7e2Q/Tfg0KQ9Knhc414FFTslFTDsHSKaywgmaEXYnLwqOnxVoAjyfqo3UBET4xzMpEB1GqT/HjuuZqnRMh+F6kcUgU1aLTeYtOFiViXsYgJ17kMwl2dIZfio6fg4yIKnsVQwQbfDzBJ23w+wjyQwG+w/hReE+V+S934GwN8OilFfIKJ9IrrrnHvwnY5hC+DBPyPqQ07H8oxDFoQtxom06tpcqLnIehTZOAsT3BGK8FDpRhh8i0uHG1+MOoAVxsrfELd6IN8Y7n0oLqTPH0ph8WaMCQkmsCFXJ72oKynC/hsj7vymrww0dyqs7kQ2D+DeT4RYcRBK8fVtjWzjyVoAYPpugyEAVsiBH9Cssbh8wb/fzzSHVe1hhs0t6W+ePBnR3pDvR1c8vxRiku4glzJsYwBFKAIK1EwKDtN8OS5y/EFk0QtCF9x1UygUF6O0flcaF9/nH5gs4QxQo/QEmKOK0aVZ4ynbUoSo6gUkVEQg0skACi6yfnzGaL7+03ex+ljNYjr55QAVQo5hnqO5fcRjju3ZurNcvVGbDmq1wfReWGQWM6ZTqwAOX5wiNM+HkGeivIhOiNGhiAFn5YWUDseKQFFJa5THy2mC6i2qB/6hpqbjnIjTxAue2vS8WNi9KdQYN0sFGgyHJuOiZM3Q7KKFK0JOocqYu9HMSgZyFffOcFX7qApRPwPgnnPut2m7++p5AO8k/44Cs99xUdCdcOXrVnr4AaAICTjd2ETtSJJcpvI7YPVYSE82t0JyanCcKCID7L8R0GDrAfo81pItLn7oFte5ywsh7yiWDtP7/juqGwWpV2SwVdxZPa/B5ct+1zj/pEIdFICzSwcEXsC9twbkF4Eb4KBAtjGMllt9bMI3Lw2WH6RsPWJ2PyStlj30KngnezUnNgEfh+vQt29y4u7Di4+XPJcmJy7pFpe+ASs/FGxFxeVKwuSxJKVYTyMnYbGqCe1+zhTr83fB3oVHp8Yd0G2Rl8T4uCKH6TuNqE4Xiktmniuj5O/HRBndqKCDZ6CaEfu/vcJw5HfBsdYiz5cRL4pDrdnrNCVh+jg8xKcVdDtlj8LOSvQHApM2gblJGel+zTbGez3x1iRgFhvXHq9QlwGFmAui1WkSKHJrvHL4zWm4ZrXcT5nCEASG3e1aCG9qhTru8JoA4xhtm5136G5P+JiRoas7LOG0fz+/TGDir9wAvoEr2YdeFIhoAuA/hA8dPrIR0Z8H8OcBoJjs/0F+amc729l30T6Kp/AJAK8AiF7CCwC+REQ/io8oMLuYPe9u/pYvEerAaAR49yeaamX3GvdqtDcj7t0iX43SF2Es9EFYdRVxrsIWhMuABhsmJfK132Xq4xHKbIt0xPKaI6BZ3y4OAAARYUlEQVQJJUE15ltIOab/KhX6mUK3F3o0XrOYv+FdRLXuYGcB0z4TdGV9f4329gQXL4fYuQLm74Q8xH7GFRObJU1aFcHdjn0cgYYu8gcSMcbfZmAUnxqQlCodilDqjfRzTHnfeTFWwLcwl4FeLb/oodukP6GLDUCjj11DaKY3I2YxJh4MEFmj90oOJSYJJ6LNCNmTJe+UsBau9OdKw8gucndYske4uZVzqXN2fwAtCq7GmEro3MIV8nN2PCZKYhbloxiPa9gqA6LLXWacU4CSrL5qB+QxJ7LaAFrDVWGcbQ87r/m1OvGTRkrB7cewQCOPIZJzoHbEeMd7CqbMpOLSG5THoXdBK/agyGSMrlWdBUpiDoh8NTJC1VEGvR74Oq1DE99ESSgWqfeuYh96UXDOfQXArfhvInoTwI84546J6PMAfoGIfg0+wXjxQfkEAIAiLp2YWzPuYHRasZusu4w5CWNpDwDUQBhmGZojD1f0sluxIQccU3tIqn+oZu9KJ9040agftAwh7g4LmF4ajWKsWD3pmG/RaYFVt/vKy8Y99Mec3mulY+5oxiQh7YEQteabCt1Cml32v2GkOcpKErWfy4OrRv0eXIBmglKbSRnTKcFTwEFwEqPwDJDxCLvYmVguDVZ3wm8li+J4txJaduNQXiR0cs4hO/UhmJ2WyJbxpiaY4P7rdkRxEcp2TQc39Q9Re3eG9uXDbZLdMBd63UM/9g9Y1UxBxh+zeqOHXQR3ucjQHlWo74f4fN0CKoSWVY7uln/wyEkjkC2UXwgAn3TsjHBmEnEc7krNGxNdrET4dj6FWm1Am6gEK7iT4e4+9CqAG0bLTU/UDJwHMbMCWTuiuh9CljJHd6vm08+XkTZNaqs5wFDy+NuRip4Gw6GEx3wEseI3B1QPQ1iYa07gZhcdrmpXKUn+KoB/COAzRPQuEf3cd/j43wfwBoDXAfy3AP7tK49kZzvb2bWw6yEwu/+C+6f/qZ8H4JudODmYsNdmrfMgD/jVn4VACL40w2Uw4pIQHFhMxebE5b3iUlb5bj/zVGsJr2UkQc2PNxhv+JW6uVkwatKRiNQ45YEl0SMxtdChmYKQJS7+5QuhvFj4KkdMAs7fatEdRLXYpLU7AWkV5yNn2MdKczYb8EIrxXkoL5aKmadMBU6MlUspNerW90KIYKthFObyJaEJy1qhFB8nUtIk50JCMjYEEZcrx1ok6qsnvexmo+VwAwDG/YqTY8O84OusO8vIR2o6IJTk3CBehesH0KQGjgJILVNeJQlhp433QpHzTjssSi6Pqs43CkUvxBUZhoV4N5Fu31HiaQ0GNBhGHppayHr7heZEcdYa7gOJFQU/LgMzybmXRTUjzFTC3NS2BIQinZ9zyM5bqEvveblaQuvhoIYOno5+fAF34YF8NKmBKnxuNPjf3vnP/skRmLUZcUltqNUWN0BK3R2z8mqw7JarIXSvxYxznolUGyDEGrk0V118XLj3AP9gRwj14u2RM+F0o0YX8hPLj2lW/C3PBFY8fdAjP2thav+58mGDLORCVDf6EhOA8WACUBXOkaAHoRPr93N5EBuL4knoGO1HDIfeZe4Oc5giqggZ9AuN6bv+Rpi/umapMFhAdf445eM1u7J+cfSv87VFcdZj9WLF81+E6kN9KijC+Rsr6GM/McNzBxw+mcpTylehQWrYk4WkWJotvsGLzy74/bhY68sO+fEG6MPi6xznIWgwzAFBRHCHPixsn5tLDN6NcFqhOxLSGNYH6RxTw+mNLCTF8ZofKBDBTir2k/Wjc9jCdxnCAf2B/91+rpmwJLsEKFMiUps8x8XSoDwOYdJok0UpY2wEbTqoTKE59L+dacVKVKbKmGlb9cK9GNm2Ab9RdbenoNApbErFkGlHxLB189IRdLPHcxnLvhz2XMF2DVE729nOtuxaeApwYGyAHhwOXg/KQ73lRImvEYcVWEvSrjjv/cqfCw6+D+2+w1Rc3vpUEkuz+wI2aQ8zjCVxr70aHU4/G7yWee6RZwAmj4QcszhpuK5tSg13WKM7iFNZJWIkJfJL8VrqB3611ocFhqmQarpa8c4TATkA0N+cckNUc1Paa6vTEWNJePRjfteon9QoWUOBOMyZF0JH1twQvcF8bTHMcyZy1Z1j3MX81VPQeUB/OYcYXubvnCB7LeyGsylcnklD03EGNw3zMS0Yu28zEaGF8x4FAGyeqzB50CImfqPIDeCTg7GVWfULZpBOmavWL05Qno2Yvnrsj7Oo+XpAEZqb0S0v2FPMWof6JDDnBoWtGH5ls5J7B2wyZykXRXejRHnWew8HQGEFkRk9HgAwB1MO/2i0zA1iJwWyx0vMTlc8t/F7alJB7/lrSe0Iir/nHIc/1BkMRxPk5yEJOhg57qNj0KEv6w/PH7LX4CYFuoB/yJq5z/Zdwa7FoqB7i4OvXnzL+/2NCca5IPfihRsWGt0i3uwTkBHa8vJ8RLGMfIeakYftgcbq+dAQdKJQB2Xm4tKgOrY4/R7v1q1vC7Nvful75f0Ypbd+/bnFlgrR7J5I3bV7CuvnYh0QKE+E49GUZTgPYPGmQXsQ0JJrh3UQWz3/VI29N/znyDju3oPzeQHAl+emj0ZmV+7nCt1cXM2I9ly+lPH4D1/tkrKVgqmkJAYCQ4bb5xcoYsgxKbC5G0KhQUI0NTqvWBXCieKsR3YaSsrWgoaA6DMW5eNIntPBzkNJleqtfA9Zl5QODYcv5Bzy04bHHOP7+nHvH7wA5x3nJd/8+drwtZi9tdlCTUaas7H21Gax+nHxCeEfKNbb4LFYnowCvcPRhMcW6eSKxyv+fndUSY6AhA07X1uUpeYwSTcDh5YpXNlOcmgbY2bZFAFPr2dDmDrOSxG32Ztw9UGve2mO2gwclrw3b/GdbBc+7GxnO9uya+Ep2EJhE4hYs8aw+9XvC+fAOFGcle3nxE1Pjnx7ckx09QvNbvL6eQIFfYjpA4uD10KG/RWNsx8MVFz3ckzvucTTcNxS288Ji7e8u1a8/gjtZ++G9xUzL+WrEZvbJTa3wi72xGIegN75xnKYc/wDGkWAn8/fttj76ikiEdRwNIMa/Y7c7RE3NxXHa94BbFVAP/H1e3NzH/3NGvUDv4tOX2sx3JnzfBaveWiIGw3c8554lvoRdBayqVojm1RwAe8/zkvOikMRxnlItO1lnAwtLkbO3mfHKwy35liHXpT8chSW4SJD85x3edUg3pUap8JoNDqYiQjEZhvL11w3I4p7wWvMM4yB0HSY56i/ceLfP5p7MRWSVuxoHsgVksulRh52cac1EDyFfDkgu+y4uWg6yZkaL18alA/8PNlpiTGQw9LokF+sUKx9ctXWObc7x2QuAGaY9sdUyC8jTyBgcoUhQMuHScXCLk6DNSDylcPsndg6baGPQyh3vgRlGfTEz629u48xhAljVXPFpLp/CQpwdFo1qB76r69fmuGqdi0WBZMBZ58J2dchY9c8ReS1NxXnB5QBslDOm90zKC4GxuinYrNqKPmhnH/tDHTqb7b9/4fgAiiFLlZwmwa0H0AqmcZw279ub5VcNoO1yAMAZN5brAI6sj0oYQpg9bEwnvsO+1/x1Fh2WqIL2ea7/6/h32pul2g+tof63csw5hF7r0p2eDgUkE9E2uVnDaPpVD+ifu0x3CRUDybJOJ1D/+m4eOXsPruMsLnpM+z5xsGLp0pTVxSmsRlxlQPkUYEAUJxspMtwUsJlipW4sotGcgp1jvq+X6z02Zrf725N+Frq3m71KyCWleHp46exjNn1gAvnWCiMt/0yevlS5YVk+0hhJ01g5VmP4iJuJBqb0KhVLA03I7kyx9n37UEP/vfylZSUyTrmfXAkNGbdQqPYl/nUrfTiAMLhkF32oIiCbDu4B4/5M3AORSiDqsUCFBCVrm0xn4VjziYw05B7eWECHSohxXIPqpWQI793ijwAtsajufRb5BrrF32Io+7UnDf5MAKzu/BhZzvb2ZZdC0/Bt0v71xZgkZBiaZn9dv4ucccaIEIjTnmYc9RtoMEwdnz+jUt+vXlpD6t/1u+UpiKU537pnL/lV+jNnUCCmot+oikI9hX/9+x2jdXzMSstnZQHr7fQqx4Hr4YW5/0C9/5F37qrBoEcL942qL/2CADQHd31VFl7cXfNABdxF1Yk45ue4d/Lz+5L63PnUJwWfG7DPBdg1lJUm+t7a6g37/t5KQvkn33ef38TxHCSJJaKFYc8w3jTe0rDouAdcJyX6AOmX/fWw5LD7jTu1byjZhuD7LH3yFzT8m4IQJKO95+gLArYG/4465dnjHkgY3mntEcTdv+zc2E92usNqBsYzwDlO1f9/Bnu5swvLXtjLteM+VCdweTRwLRz2b0TuHXIyFrHPRFwjqntJlkGmlSw89DluNpwuzIA2FA9WL08ZZEe3TlMHx6G84oeRqDdqzIOWSbvrqEuvado65yrB9VJz7qYza0S3aKGaH8kTNVLw6F1e6C5G/XoS+eghyHkMlcXg7kWiEYiegJgDeD4WY8lsSPsxvNBdt3GtBvPd7aXnHM3P+hD12JRAAAi+sdXgWA+LduN54Ptuo1pN57vju1yCjvb2c62bLco7GxnO9uy67Qo/DfPegDvsd14Ptiu25h24/ku2LXJKexsZzu7HnadPIWd7Wxn18Ce+aJARD9FRF8LAjK/+IzG8CIR/Z9E9HtE9LtE9O+G9/8SEd0joi+H/376KY7pTSL6SjjuPw7vHRLRbxDR18P/D57SWD6TzMGXiWhJRH/hac/PtxMmer85eRrCRO8znr9CRK+GY/49ItoP779MRE0yV3/tuz2e75q50B77LP6DFxj4BoCPwzOA/DaA730G47gL4IfD6zmA1wB8L4C/BODff0Zz8yaAo/e89x8D+MXw+hcB/OVndM0eAnjpac8PgJ8A8MMAvvpBcwLgpwH8r/Bwnx8H8JtPaTx/DEAWXv/lZDwvp5+7zv89a0/hRwG87px7wznXA/g1eEGZp2rOuQfOuS+F15cAfh9er+K62c8A+Fvh9d8C8C8/gzH8JIBvOOfeetoHds793wBO3/P2+80JCxM5574AYJ+I7v5hj8c59+vOuci++gV4RvN/ouxZLwrvJx7zzCyoYf0QgN8Mb/1CcAX/xtNy14M5AL9ORF8MGhkAcNsJO/ZDALef4nii/SyAX03+/azmJ9r7zcl1uLf+HLy3Eu0VIvotIvq/iOife8pjubI960XhWhkRzQD8jwD+gnNuCa+F+QkAPwivcvWfPMXh/FHn3A/D63P+PBH9RPpH533Sp1o6IqICwJ8E8D+Et57l/HyLPYs5eT8jol8GMAL4lfDWAwAfc879EIB/D8DfIaLFsxrfd7JnvShcWTzmD9uIKIdfEH7FOfc/AYBz7pFzzjjnLDxl/Y8+rfE45+6F/z8G8PfCsR9FFzj8//H7/8Ifiv1xAF9yzj0KY3tm85PY+83JM7u3iOjPAPiXAPwbYaGCc65zzp2E11+Ez6V9+mmM58Pas14U/j8AnyKiV8Iu9LMAPv+0B0Fe6uqvA/h959xfTd5PY9B/BcBX3/vdP6TxTIloHl/DJ6++Cj83fzp87E9jW9z3adifQhI6PKv5eY+935x8HsC/GaoQP46rChP9AY2IfgpeePlPOuc2yfs3iUiH1x+HV2a/ImviU7ZnnemEzxK/Br9y/vIzGsMfhXc7fwfAl8N/Pw3gvwPwlfD+5wHcfUrj+Th8Jea3AfxunBcANwD8HwC+DuAfADh8inM0BXACYC9576nOD/yC9ADAAJ8j+Ln3mxP4qsN/Ge6rr8CrmD2N8bwOn8uI99FfC5/9V8O1/DKALwH4E8/iXr/KfztE4852trMte9bhw852trNrZrtFYWc729mW7RaFne1sZ1u2WxR2trOdbdluUdjZzna2ZbtFYWc729mW7RaFne1sZ1u2WxR2trOdbdn/D4tdUFPKdClqAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "trainImages = np.array([i for i in imagearr]).reshape(-1, 150, 150, 1)\n",
    "print(trainImages.shape)\n",
    "plt.imshow(np.asarray(imagearr)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "_uuid": "8136505efac0dacfd3bb7b1af9ee4a0eea5e3a3d"
   },
   "outputs": [],
   "source": [
    "test_images=np.array(test.iloc[:,0])\n",
    "imagearr=[]\n",
    "for i in test_images:\n",
    "    img=Image.open(img_dir+i).convert('L')\n",
    "    img=img.resize((150,150),Image.ANTIALIAS)\n",
    "    imagearr.append(np.array(img))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "_uuid": "984f1d09926ce65cbe507d4801bbaf90ea527802"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2680, 150, 150, 1)\n"
     ]
    }
   ],
   "source": [
    "# np.asarray(imagearr)\n",
    "testImages = np.array([i for i in imagearr]).reshape(-1, 150, 150, 1)\n",
    "print(testImages.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "_uuid": "eca37422bded36c3d0c07d58dd18f2a9b260307f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2823080.jpg</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2870024.jpg</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2662125.jpg</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2900420.jpg</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2804883.jpg</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         image  category\n",
       "0  2823080.jpg         1\n",
       "1  2870024.jpg         1\n",
       "2  2662125.jpg         2\n",
       "3  2900420.jpg         3\n",
       "4  2804883.jpg         2"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "_uuid": "acb34283e8726292da21005c30fe7a40e0e394f1"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "trainLabels = train['category'].values\n",
    "from keras.utils import np_utils\n",
    "trainLabels.shape\n",
    "trainLabels = np_utils.to_categorical(trainLabels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "_uuid": "497b9c86a33309be2f1e974186c0f82f5e4adc5e"
   },
   "outputs": [],
   "source": [
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten\n",
    "from keras.layers import Conv2D, MaxPooling2D\n",
    "from keras.layers. normalization import BatchNormalization\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "_uuid": "118693eed3d05469a0b5c0e438267a9661ce80a0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /opt/conda/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From /opt/conda/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Conv2D(32, kernel_size = (5, 5), activation='relu', input_shape=(150, 150, 1)))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(64, kernel_size=(4,4), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(256, activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(128, activation='sigmoid'))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(6, activation = 'softmax'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "_uuid": "d12d751006b1c55d5c3213c14c3d76f21252635e"
   },
   "outputs": [],
   "source": [
    "\n",
    "model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics = ['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "_uuid": "9603a03426984eab24c40ed500e6c4ad27b6a43b"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "_uuid": "9c13858d97fd6ad5fe8e98d0b7a8db5c12d235e7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /opt/conda/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Epoch 1/10\n",
      "6252/6252 [==============================] - 346s 55ms/step - loss: 1.2154 - acc: 0.5042\n",
      "Epoch 2/10\n",
      "6252/6252 [==============================] - 345s 55ms/step - loss: 0.8570 - acc: 0.6582\n",
      "Epoch 3/10\n",
      "6252/6252 [==============================] - 345s 55ms/step - loss: 0.6891 - acc: 0.7369\n",
      "Epoch 4/10\n",
      "6252/6252 [==============================] - 346s 55ms/step - loss: 0.5615 - acc: 0.7833\n",
      "Epoch 5/10\n",
      "6252/6252 [==============================] - 346s 55ms/step - loss: 0.4740 - acc: 0.8204\n",
      "Epoch 6/10\n",
      "6252/6252 [==============================] - 345s 55ms/step - loss: 0.4022 - acc: 0.8501\n",
      "Epoch 7/10\n",
      "6252/6252 [==============================] - 347s 55ms/step - loss: 0.3316 - acc: 0.8783\n",
      "Epoch 8/10\n",
      "6252/6252 [==============================] - 344s 55ms/step - loss: 0.2862 - acc: 0.8927\n",
      "Epoch 9/10\n",
      "6252/6252 [==============================] - 344s 55ms/step - loss: 0.2424 - acc: 0.9096\n",
      "Epoch 10/10\n",
      "6252/6252 [==============================] - 344s 55ms/step - loss: 0.1998 - acc: 0.9274\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fd3adbe8be0>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(trainImages, trainLabels, batch_size = 100, epochs = 10, verbose = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "_uuid": "e0ae82884d236968152bdca847862454a3347157"
   },
   "outputs": [],
   "source": [
    "# model.predict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "_uuid": "c7805de8c8f41ddb2b380983af8f6eb755e422db"
   },
   "outputs": [],
   "source": [
    "predictions = model.predict_classes(testImages)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "_uuid": "658c517f52bc2ec81795063f2732088e2fb32249"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions.max()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "_uuid": "cbf0ba5f550701563cb09e10252beed876ae73fe"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1007700.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1011369.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1051155.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1062001.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1069397.jpg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         image\n",
       "0  1007700.jpg\n",
       "1  1011369.jpg\n",
       "2  1051155.jpg\n",
       "3  1062001.jpg\n",
       "4  1069397.jpg"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# prediction_ = np.argmax(np_utils.to_categorical(predictions), axis = 1)\n",
    "# prediction_ = encoder.inverse_transform(prediction_)\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "_uuid": "4158a22c94cc59d674faae013c65799644046314"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1007700.jpg</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1011369.jpg</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1051155.jpg</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1062001.jpg</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1069397.jpg</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         image  category\n",
       "0  1007700.jpg         4\n",
       "1  1011369.jpg         4\n",
       "2  1051155.jpg         4\n",
       "3  1062001.jpg         2\n",
       "4  1069397.jpg         4"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test['category']=predictions\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "_uuid": "77821c33efd2caeb4ee60f7b9443c6af0b8c09fe"
   },
   "outputs": [],
   "source": [
    "test.to_csv('s2.csv',index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
